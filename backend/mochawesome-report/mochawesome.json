{
  "stats": {
    "suites": 3,
    "tests": 24,
    "passes": 21,
    "pending": 0,
    "failures": 3,
    "start": "2025-10-02T05:01:26.291Z",
    "end": "2025-10-02T05:01:26.361Z",
    "duration": 70,
    "testsRegistered": 24,
    "passPercent": 87.5,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "6764bc52-dd38-4816-ad6d-c2489c911ee2",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "4ce21540-f9ed-4876-9156-e1d84e3f30c9",
          "title": "Appointments API with Strategies",
          "fullFile": "/Users/clairelin/Library/CloudStorage/OneDrive-QueenslandUniversityofTechnology/202507_Y1S2/IFN636_Software Life Cycle Management/Assessment 1/sdlapps/backend/test/appointments.test.js",
          "file": "/test/appointments.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should create appointment under strict strategy",
              "fullTitle": "Appointments API with Strategies should create appointment under strict strategy",
              "timedOut": false,
              "duration": 14,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(server)\n  .post(\"/api/appointments\")\n  .send({\n    appointedBy: \"Alice\",\n    petName: \"Buddy\",\n    vetName: \"Dr. Smith\",\n    appointDate: \"2025-09-30T10:00:00.000Z\",\n    duration: 30,\n    status: \"Scheduled\",\n    reason: \"Checkup\",\n    strategy: \"strict\"\n  })\n  .end((err, res) => {\n    expect(res).to.have.status(201);\n    createdId = res.body._id;\n    done();\n  });",
              "err": {},
              "uuid": "a51a8efe-4544-44c6-acd7-3afcd1c7d213",
              "parentUUID": "4ce21540-f9ed-4876-9156-e1d84e3f30c9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should reject overlapping appointment under strict strategy",
              "fullTitle": "Appointments API with Strategies should reject overlapping appointment under strict strategy",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(server)\n  .post(\"/api/appointments\")\n  .send({\n    appointedBy: \"Bob\",\n    petName: \"Charlie\",\n    vetName: \"Dr. Smith\",\n    appointDate: \"2025-09-30T10:00:00.000Z\", // same time as Alice\n    duration: 30,\n    status: \"Scheduled\",\n    reason: \"Vaccination\",\n    strategy: \"strict\"\n  })\n  .end((err, res) => {\n    expect(res).to.have.status(400);\n    done();\n  });",
              "err": {},
              "uuid": "7ef7afd2-67e3-49f7-904f-b31b8740839c",
              "parentUUID": "4ce21540-f9ed-4876-9156-e1d84e3f30c9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should reject appointments within buffer time",
              "fullTitle": "Appointments API with Strategies should reject appointments within buffer time",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(server)\n  .post(\"/api/appointments\")\n  .send({\n    appointedBy: \"Eve\",\n    petName: \"Milo\",\n    vetName: \"Dr. Smith\",\n    appointDate: \"2025-09-30T10:20:00.000Z\", // within 15min buffer\n    duration: 30,\n    status: \"Scheduled\",\n    reason: \"Surgery\",\n    strategy: \"buffer\"\n  })\n  .end((err, res) => {\n    expect(res).to.have.status(400);\n    done();\n  });",
              "err": {},
              "uuid": "9082a866-c939-422a-b7b1-02d1bd3e76ff",
              "parentUUID": "4ce21540-f9ed-4876-9156-e1d84e3f30c9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should allow overlapping appointment under relaxed strategy",
              "fullTitle": "Appointments API with Strategies should allow overlapping appointment under relaxed strategy",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "chai.request(server)\n  .post(\"/api/appointments\")\n  .send({\n    appointedBy: \"Sam\",\n    petName: \"Luna\",\n    vetName: \"Dr. Smith\",\n    appointDate: \"2025-09-30T10:00:00.000Z\", // overlaps but relaxed allows\n    duration: 30,\n    status: \"Scheduled\",\n    reason: \"Follow-up\",\n    strategy: \"relaxed\"\n  })\n  .end((err, res) => {\n    expect(res).to.have.status(201);\n    done();\n  });",
              "err": {
                "message": "AssertionError: expected Response{ _events: {}, …(34), …(2) } to have status code 201 but got 400",
                "estack": "AssertionError: expected Response{ _events: {}, …(34), …(2) } to have status code 201 but got 400\n    at /Users/clairelin/Library/CloudStorage/OneDrive-QueenslandUniversityofTechnology/202507_Y1S2/IFN636_Software Life Cycle Management/Assessment 1/sdlapps/backend/test/appointments.test.js:86:29\n    at Request.callback (node_modules/superagent/lib/node/index.js:716:12)\n    at /Users/clairelin/Library/CloudStorage/OneDrive-QueenslandUniversityofTechnology/202507_Y1S2/IFN636_Software Life Cycle Management/Assessment 1/sdlapps/backend/node_modules/superagent/lib/node/index.js:916:18\n    at IncomingMessage.<anonymous> (node_modules/superagent/lib/node/parsers/json.js:19:7)\n    at IncomingMessage.emit (node:events:530:35)\n    at endReadableNT (node:internal/streams/readable:1698:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:90:21)",
                "diff": "- 400\n+ 201\n"
              },
              "uuid": "4f89633d-23a6-4942-8c1e-df2c91d8583b",
              "parentUUID": "4ce21540-f9ed-4876-9156-e1d84e3f30c9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should allow emergency appointment even if overlapping",
              "fullTitle": "Appointments API with Strategies should allow emergency appointment even if overlapping",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(server)\n  .post(\"/api/appointments\")\n  .send({\n    appointedBy: \"EmergencyUser\",\n    petName: \"Rocky\",\n    vetName: \"Dr. Smith\",\n    appointDate: \"2025-09-30T10:00:00.000Z\", // overlaps, but emergency\n    duration: 30,\n    status: \"Scheduled\",\n    reason: \"Emergency\",\n    strategy: \"priority\"\n  })\n  .end((err, res) => {\n    expect(res).to.have.status(201);\n    done();\n  });",
              "err": {},
              "uuid": "7cef19a2-a826-4905-84b5-6b9086092922",
              "parentUUID": "4ce21540-f9ed-4876-9156-e1d84e3f30c9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should allow small overlaps under flexible strategy",
              "fullTitle": "Appointments API with Strategies should allow small overlaps under flexible strategy",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(server)\n  .post(\"/api/appointments\")\n  .send({\n    appointedBy: \"John\",\n    petName: \"Max\",\n    vetName: \"Dr. Smith\",\n    appointDate: \"2025-09-30T10:25:00.000Z\", // 5 min overlap allowed\n    duration: 30,\n    status: \"Scheduled\",\n    reason: \"Checkup\",\n    strategy: \"flexible\"\n  })\n  .end((err, res) => {\n    expect(res).to.have.status(201);\n    done();\n  });",
              "err": {},
              "uuid": "6767fd6b-2d4d-453e-9dac-3e5b7cf0ed45",
              "parentUUID": "4ce21540-f9ed-4876-9156-e1d84e3f30c9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should reject large overlaps under flexible strategy",
              "fullTitle": "Appointments API with Strategies should reject large overlaps under flexible strategy",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(server)\n  .post(\"/api/appointments\")\n  .send({\n    appointedBy: \"Kate\",\n    petName: \"Bella\",\n    vetName: \"Dr. Smith\",\n    appointDate: \"2025-09-30T10:10:00.000Z\", // overlaps too much\n    duration: 30,\n    status: \"Scheduled\",\n    reason: \"Checkup\",\n    strategy: \"flexible\"\n  })\n  .end((err, res) => {\n    expect(res).to.have.status(400);\n    done();\n  });",
              "err": {},
              "uuid": "e7c27adf-a8e0-4024-b446-225a857c6b1c",
              "parentUUID": "4ce21540-f9ed-4876-9156-e1d84e3f30c9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete appointment",
              "fullTitle": "Appointments API with Strategies should delete appointment",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(server)\n  .delete(`/api/appointments/${createdId}`)\n  .end((err, res) => {\n    expect(res).to.have.status(200);\n    expect(res.body.message).to.equal(\"Appointment deleted\");\n    done();\n  });",
              "err": {},
              "uuid": "da7511e3-c7b1-4606-8c00-5957e879a562",
              "parentUUID": "4ce21540-f9ed-4876-9156-e1d84e3f30c9",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a51a8efe-4544-44c6-acd7-3afcd1c7d213",
            "7ef7afd2-67e3-49f7-904f-b31b8740839c",
            "9082a866-c939-422a-b7b1-02d1bd3e76ff",
            "7cef19a2-a826-4905-84b5-6b9086092922",
            "6767fd6b-2d4d-453e-9dac-3e5b7cf0ed45",
            "e7c27adf-a8e0-4024-b446-225a857c6b1c",
            "da7511e3-c7b1-4606-8c00-5957e879a562"
          ],
          "failures": [
            "4f89633d-23a6-4942-8c1e-df2c91d8583b"
          ],
          "pending": [],
          "skipped": [],
          "duration": 22,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "b3a8d29a-0189-4bb2-9c34-ba07804dbe76",
          "title": "Unit Test: Create Account (registerUser)",
          "fullFile": "/Users/clairelin/Library/CloudStorage/OneDrive-QueenslandUniversityofTechnology/202507_Y1S2/IFN636_Software Life Cycle Management/Assessment 1/sdlapps/backend/test/CreateAccount.test.js",
          "file": "/test/CreateAccount.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Unit Test: Create Account (registerUser)\"",
              "fullTitle": "Unit Test: Create Account (registerUser) \"before each\" hook in \"Unit Test: Create Account (registerUser)\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sandbox = sinon.createSandbox();\nreq = {\n  body: {\n    name: \"Alice Vet\",\n    email: \"Alice@Example.com\", // mixed case to verify normalization\n    password: \"Passw0rd!\",\n    role: \"Vet\",                \n  },\n};\nres = {\n  status: sandbox.stub().returnsThis(),\n  json: sandbox.stub(),\n};\n\nsandbox.stub(User, \"findOne\").resolves(null);\n\n   \nsandbox.stub(User, \"create\").resolves({\n  _id: \"user_123\",\n  name: \"Alice Vet\",\n  email: \"alice@example.com\",  \n  role: \"vet\",                \n});\n\n \nsandbox.stub(jwt, \"sign\").returns(\"fake.jwt.token\");",
              "err": {},
              "uuid": "2d11cba6-65ad-4612-ae52-6b95583656b1",
              "parentUUID": "b3a8d29a-0189-4bb2-9c34-ba07804dbe76",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Unit Test: Create Account (registerUser)\"",
              "fullTitle": "Unit Test: Create Account (registerUser) \"after each\" hook in \"Unit Test: Create Account (registerUser)\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sandbox.restore();",
              "err": {},
              "uuid": "dcd5baa8-74c9-4264-b99f-9c6ff752024a",
              "parentUUID": "b3a8d29a-0189-4bb2-9c34-ba07804dbe76",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "#R1: registers a new user and returns token + role",
              "fullTitle": "Unit Test: Create Account (registerUser) #R1: registers a new user and returns token + role",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await registerUser(req, res);\nexpect(User.findOne.calledOnceWith({ email: \"alice@example.com\" })).to.be.true;\nexpect(User.create.calledOnce).to.be.true;\n\n \nexpect(res.status.calledWith(201)).to.be.true;\nexpect(res.json.calledOnce).to.be.true;\nconst payload = res.json.firstCall.args[0];\nexpect(payload).to.include.keys([\"id\", \"name\", \"email\", \"role\", \"token\"]);\nexpect(payload.name).to.equal(\"Alice Vet\");\nexpect(payload.email).to.equal(\"alice@example.com\");\nexpect(payload.role).to.equal(\"vet\");\nexpect(payload.token).to.equal(\"fake.jwt.token\");",
              "err": {},
              "uuid": "757f6f34-efba-40e0-a290-61886905f6e9",
              "parentUUID": "b3a8d29a-0189-4bb2-9c34-ba07804dbe76",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "757f6f34-efba-40e0-a290-61886905f6e9"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "08860515-b671-4cba-94af-d63b93227c2d",
          "title": "Unit Test of Treatment Records",
          "fullFile": "/Users/clairelin/Library/CloudStorage/OneDrive-QueenslandUniversityofTechnology/202507_Y1S2/IFN636_Software Life Cycle Management/Assessment 1/sdlapps/backend/test/treatment_records.test.js",
          "file": "/test/treatment_records.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Unit Test of Treatment Records\"",
              "fullTitle": "Unit Test of Treatment Records \"before each\" hook in \"Unit Test of Treatment Records\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sandbox = sinon.createSandbox();\nreq = { body: {}, params: {} };\nres = {\n  status: sandbox.stub().returnsThis(),\n  json: sandbox.stub(),\n};",
              "err": {},
              "uuid": "b29d7c1c-5963-45ce-93a2-0ee3e2434dcc",
              "parentUUID": "08860515-b671-4cba-94af-d63b93227c2d",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Unit Test of Treatment Records\"",
              "fullTitle": "Unit Test of Treatment Records \"after each\" hook in \"Unit Test of Treatment Records\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sandbox.restore();",
              "err": {},
              "uuid": "87060714-e786-469d-b9c0-94760e6db884",
              "parentUUID": "08860515-b671-4cba-94af-d63b93227c2d",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "#T1: should fail if Pet Name is empty",
              "fullTitle": "Unit Test of Treatment Records #T1: should fail if Pet Name is empty",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "req.body = { petName: \"\", vetName: \"Doctor Dolittle\" };\nconst treatment = new Treatment(req.body);\ntry {\n  await treatment.validate();\n  assert.fail(\"Validation should have failed\");\n} catch (err) {\n  assert.include(err.message, \"petName\");\n}",
              "err": {},
              "uuid": "ed137d6f-d90d-48f0-8211-f270a140fa82",
              "parentUUID": "08860515-b671-4cba-94af-d63b93227c2d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#T2: should fail if Vet Name is empty",
              "fullTitle": "Unit Test of Treatment Records #T2: should fail if Vet Name is empty",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "req.body = { petName: \"Habaobao\", vetName: \"\" };\nconst treatment = new Treatment(req.body);\ntry {\n  await treatment.validate();\n  assert.fail(\"Validation should have failed\");\n} catch (err) {\n  assert.include(err.message, \"vetName\");\n}",
              "err": {
                "message": "AssertionError: expected 'Validation should have failed' to include 'vetName'",
                "estack": "AssertionError: expected 'Validation should have failed' to include 'vetName'\n    at Context.<anonymous> (test/treatment_records.test.js:47:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)",
                "diff": null
              },
              "uuid": "e1dd5161-8f31-41d0-92c3-70bd365a4fa9",
              "parentUUID": "08860515-b671-4cba-94af-d63b93227c2d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#T3: should fail if Nurse Name is empty",
              "fullTitle": "Unit Test of Treatment Records #T3: should fail if Nurse Name is empty",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "req.body = {\n  petName: \"Habaobao\",\n  vetName: \"Doctor Dolittle\",\n  nurseName: \"\",\n};\nconst treatment = new Treatment(req.body);\ntry {\n  await treatment.validate();\n  assert.fail(\"Validation should have failed\");\n} catch (err) {\n  assert.include(err.message, \"nurseName\");\n}",
              "err": {
                "message": "AssertionError: expected 'Validation should have failed' to include 'nurseName'",
                "estack": "AssertionError: expected 'Validation should have failed' to include 'nurseName'\n    at Context.<anonymous> (test/treatment_records.test.js:61:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)",
                "diff": null
              },
              "uuid": "379da403-cc08-4d6f-aae1-12cb0f7557e3",
              "parentUUID": "08860515-b671-4cba-94af-d63b93227c2d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#T4: should have Diagnosis Record",
              "fullTitle": "Unit Test of Treatment Records #T4: should have Diagnosis Record",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "req.body = {\n  petName: \"Habaobao\",\n  vetName: \"Doctor Dolittle\",\n  nurseName: \"Nancy\",\n  diagnosisRecords: [\n    { weight: \"1.9\", temperature: \"38.5\", symptoms: \"cough\" },\n  ],\n};\nconst treatment = new Treatment(req.body);\nawait treatment.validate();",
              "err": {},
              "uuid": "3d837130-c970-4217-b31d-9b7a4eec7fae",
              "parentUUID": "08860515-b671-4cba-94af-d63b93227c2d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#T5: should have Medication",
              "fullTitle": "Unit Test of Treatment Records #T5: should have Medication",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "req.body = {\n  petName: \"Habaobao\",\n  vetName: \"Doctor Dolittle\",\n  nurseName: \"Nancy\",\n  medication: [\n    {\n      medicationName: \"Antibiotic\",\n      dose: \"5mg\",\n      frequency: \"2 pills per day\",\n    },\n  ],\n};\nconst treatment = new Treatment(req.body);\nawait treatment.validate();",
              "err": {},
              "uuid": "40b2c64b-c73b-41de-9f34-8c0e52452c58",
              "parentUUID": "08860515-b671-4cba-94af-d63b93227c2d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#T6: should have Vaccination",
              "fullTitle": "Unit Test of Treatment Records #T6: should have Vaccination",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "req.body = {\n  petName: \"Habaobao\",\n  vetName: \"Doctor Dolittle\",\n  nurseName: \"Nancy\",\n  vaccination: [\n    { vaccineName: \"Triple Vaccine\", vaccinationDate: \"2025-09-27\" },\n  ],\n};\nconst treatment = new Treatment(req.body);\nawait treatment.validate();",
              "err": {},
              "uuid": "1858d5f8-0511-44fd-8540-a4fdbbac4e7b",
              "parentUUID": "08860515-b671-4cba-94af-d63b93227c2d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#T7: if have followUp and followUpDate",
              "fullTitle": "Unit Test of Treatment Records #T7: if have followUp and followUpDate",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "req.body = {\n  petName: \"Habaobao\",\n  vetName: \"Doctor Dolittle\",\n  nurseName: \"Nancy\",\n  followUp: true,\n  followUpDate: \"2025-10-20\",\n};\nconst treatment = new Treatment(req.body);\nawait treatment.validate();",
              "err": {},
              "uuid": "aee2e45c-9ad1-44c4-921c-9931808c8cc1",
              "parentUUID": "08860515-b671-4cba-94af-d63b93227c2d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#T8: should include Payment and check isPaid",
              "fullTitle": "Unit Test of Treatment Records #T8: should include Payment and check isPaid",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "req.body = {\n  petName: \"Habaobao\",\n  vetName: \"Doctor Dolittle\",\n  nurseName: \"Nancy\",\n  payment: \"111\",\n  isPaid: true,\n};\nconst treatment = new Treatment(req.body);\nawait treatment.validate();",
              "err": {},
              "uuid": "fa17f186-c77d-453b-aa32-c3d6018f1fd2",
              "parentUUID": "08860515-b671-4cba-94af-d63b93227c2d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#T9: should add a new treatment",
              "fullTitle": "Unit Test of Treatment Records #T9: should add a new treatment",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "req.body = { petName: \"Habaobao\", vetName: \"Doctor Dolittle\" };\nconst fakeTreatment = { ...req.body, _id: \"001\" };\nsandbox.stub(Treatment.prototype, \"save\").resolves(fakeTreatment);\nawait addTreatment(req, res);\nexpect(res.status.calledWith(201)).to.be.true;\nexpect(res.json.calledWith(fakeTreatment)).to.be.true;",
              "err": {},
              "uuid": "20482994-f700-4bbb-aba7-b10d8f778ecc",
              "parentUUID": "08860515-b671-4cba-94af-d63b93227c2d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#T10: should return all treatments",
              "fullTitle": "Unit Test of Treatment Records #T10: should return all treatments",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fakeList = [{ _id: \"001\", petName: \"Habaobao\" }];\nsandbox.stub(Treatment, \"find\").resolves(fakeList);\nawait getTreatments(req, res);\nexpect(res.status.calledWith(200)).to.be.true;\nexpect(res.json.calledWith(fakeList)).to.be.true;",
              "err": {},
              "uuid": "17fc2510-d28b-49a6-8847-b1aa43a7b17c",
              "parentUUID": "08860515-b671-4cba-94af-d63b93227c2d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#T11: should update a treatment",
              "fullTitle": "Unit Test of Treatment Records #T11: should update a treatment",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "req.params.id = \"001\";\nreq.body = { vetName: \"Doctor Dolittle\" };\nconst fakeUpdated = {\n  _id: \"001\",\n  petName: \"Habaobao\",\n  vetName: \"Doctor Dolittle\",\n};\nsandbox.stub(Treatment, \"findByIdAndUpdate\").resolves(fakeUpdated);\nawait updateTreatment(req, res);\nexpect(res.status.calledWith(200)).to.be.true;\nexpect(res.json.calledWith(fakeUpdated)).to.be.true;",
              "err": {},
              "uuid": "39d40800-018d-4f16-a2d9-18559789c80b",
              "parentUUID": "08860515-b671-4cba-94af-d63b93227c2d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#T12: should delete a treatment",
              "fullTitle": "Unit Test of Treatment Records #T12: should delete a treatment",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "req.params.id = \"001\";\nsandbox.stub(Treatment, \"findByIdAndDelete\").resolves({ _id: \"001\" });\nawait deleteTreatment(req, res);\nexpect(res.status.calledWith(200)).to.be.true;\nexpect(res.json.calledWithMatch({ message: \"Treatment deleted\" })).to.be\n  .true;",
              "err": {},
              "uuid": "5d1f4584-81ad-4af3-b9be-e91653a2a16f",
              "parentUUID": "08860515-b671-4cba-94af-d63b93227c2d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#T13: should remove a Diagnosis Record",
              "fullTitle": "Unit Test of Treatment Records #T13: should remove a Diagnosis Record",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const treatment = new Treatment({\n  petName: \"Habaobao\",\n  vetName: \"Doctor Dolittle\",\n  nurseName: \"Nancy\",\n  diagnosisRecords: [\n    { weight: \"1.9\", temperature: \"38.5\", symptoms: \"cough\" },\n  ],\n});\nsandbox.stub(Treatment.prototype, \"save\").resolves(treatment);\nawait treatment.save();\ntreatment.diagnosisRecords.id(treatment.diagnosisRecords[0]._id).remove();\nawait treatment.save();\nexpect(treatment.diagnosisRecords).to.have.lengthOf(0);",
              "err": {},
              "uuid": "1b368de1-4ccc-4ff5-a07d-0153a7b32740",
              "parentUUID": "08860515-b671-4cba-94af-d63b93227c2d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#T14: should remove a Medication",
              "fullTitle": "Unit Test of Treatment Records #T14: should remove a Medication",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const treatment = new Treatment({\n  petName: \"Habaobao\",\n  vetName: \"Doctor Dolittle\",\n  nurseName: \"Nancy\",\n  medication: [\n    {\n      medicationName: \"Antibiotic\",\n      dose: \"5mg\",\n      frequency: \"2 pills per day\",\n    },\n  ],\n});\nsandbox.stub(Treatment.prototype, \"save\").resolves(treatment);\nawait treatment.save();\ntreatment.medication.id(treatment.medication[0]._id).remove();\nawait treatment.save();\nexpect(treatment.medication).to.have.lengthOf(0);",
              "err": {},
              "uuid": "9884db45-6336-4397-9c90-d7774f678678",
              "parentUUID": "08860515-b671-4cba-94af-d63b93227c2d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#T15: should remove a Vaccination",
              "fullTitle": "Unit Test of Treatment Records #T15: should remove a Vaccination",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const treatment = new Treatment({\n  petName: \"Habaobao\",\n  vetName: \"Doctor Dolittle\",\n  nurseName: \"Nancy\",\n  vaccination: [\n    { vaccineName: \"Triple Vaccine\", vaccinationDate: \"2025-09-27\" },\n  ],\n});\nsandbox.stub(Treatment.prototype, \"save\").resolves(treatment);\nawait treatment.save();\ntreatment.vaccination.id(treatment.vaccination[0]._id).remove();\nawait treatment.save();\nexpect(treatment.vaccination).to.have.lengthOf(0);",
              "err": {},
              "uuid": "1545b438-432e-410a-bf5f-6b841e5ddd0c",
              "parentUUID": "08860515-b671-4cba-94af-d63b93227c2d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ed137d6f-d90d-48f0-8211-f270a140fa82",
            "3d837130-c970-4217-b31d-9b7a4eec7fae",
            "40b2c64b-c73b-41de-9f34-8c0e52452c58",
            "1858d5f8-0511-44fd-8540-a4fdbbac4e7b",
            "aee2e45c-9ad1-44c4-921c-9931808c8cc1",
            "fa17f186-c77d-453b-aa32-c3d6018f1fd2",
            "20482994-f700-4bbb-aba7-b10d8f778ecc",
            "17fc2510-d28b-49a6-8847-b1aa43a7b17c",
            "39d40800-018d-4f16-a2d9-18559789c80b",
            "5d1f4584-81ad-4af3-b9be-e91653a2a16f",
            "1b368de1-4ccc-4ff5-a07d-0153a7b32740",
            "9884db45-6336-4397-9c90-d7774f678678",
            "1545b438-432e-410a-bf5f-6b841e5ddd0c"
          ],
          "failures": [
            "e1dd5161-8f31-41d0-92c3-70bd365a4fa9",
            "379da403-cc08-4d6f-aae1-12cb0f7557e3"
          ],
          "pending": [],
          "skipped": [],
          "duration": 11,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.3.1"
    },
    "marge": {
      "options": {
        "reportDir": "mochawesome-report",
        "reportFilename": "mochawesome"
      },
      "version": "5.2.0"
    }
  }
}