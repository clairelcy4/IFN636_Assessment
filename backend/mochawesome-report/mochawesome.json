{
  "stats": {
    "suites": 3,
    "tests": 29,
    "passes": 5,
    "pending": 0,
    "failures": 24,
    "start": "2025-10-02T07:32:47.401Z",
    "end": "2025-10-02T07:32:47.416Z",
    "duration": 15,
    "testsRegistered": 29,
    "passPercent": 17.24137931034483,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "8e847bd8-4677-4fcf-a884-212c9fd6f317",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "5923c505-4a28-433b-a30c-f288a8297f9b",
          "title": "Appointments API with Strategies",
          "fullFile": "/Users/jasper/IFN636_Assessment/backend/test/appointments.test.js",
          "file": "/test/appointments.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should create appointment under strict strategy",
              "fullTitle": "Appointments API with Strategies should create appointment under strict strategy",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "chai.request(server)\n  .post(\"/api/appointments\")\n  .send({\n    appointedBy: \"Alice\",\n    petName: \"Buddy\",\n    vetName: \"Dr. Smith\",\n    appointDate: \"2025-09-30T10:00:00.000Z\",\n    duration: 30,\n    status: \"Scheduled\",\n    reason: \"Checkup\",\n    strategy: \"strict\"\n  })\n  .end((err, res) => {\n    expect(res).to.have.status(201);\n    createdId = res.body._id;\n    done();\n  });",
              "err": {
                "message": "TypeError: chai.request is not a function",
                "estack": "TypeError: chai.request is not a function\n    at Context.<anonymous> (test/appointments.test.js:13:10)\n    at process.processImmediate (node:internal/timers:485:21)",
                "diff": null
              },
              "uuid": "cd3437fd-c350-4e01-b2e3-6fe2a890a963",
              "parentUUID": "5923c505-4a28-433b-a30c-f288a8297f9b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should reject overlapping appointment under strict strategy",
              "fullTitle": "Appointments API with Strategies should reject overlapping appointment under strict strategy",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "chai.request(server)\n  .post(\"/api/appointments\")\n  .send({\n    appointedBy: \"Bob\",\n    petName: \"Charlie\",\n    vetName: \"Dr. Smith\",\n    appointDate: \"2025-09-30T10:00:00.000Z\", // same time as Alice\n    duration: 30,\n    status: \"Scheduled\",\n    reason: \"Vaccination\",\n    strategy: \"strict\"\n  })\n  .end((err, res) => {\n    expect(res).to.have.status(400);\n    done();\n  });",
              "err": {
                "message": "TypeError: chai.request is not a function",
                "estack": "TypeError: chai.request is not a function\n    at Context.<anonymous> (test/appointments.test.js:33:10)\n    at process.processImmediate (node:internal/timers:485:21)",
                "diff": null
              },
              "uuid": "206728ab-b2c4-4eb6-85e9-0b6b405b596e",
              "parentUUID": "5923c505-4a28-433b-a30c-f288a8297f9b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should reject appointments within buffer time",
              "fullTitle": "Appointments API with Strategies should reject appointments within buffer time",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "chai.request(server)\n  .post(\"/api/appointments\")\n  .send({\n    appointedBy: \"Eve\",\n    petName: \"Milo\",\n    vetName: \"Dr. Smith\",\n    appointDate: \"2025-09-30T10:20:00.000Z\", // within 15min buffer\n    duration: 30,\n    status: \"Scheduled\",\n    reason: \"Surgery\",\n    strategy: \"buffer\"\n  })\n  .end((err, res) => {\n    expect(res).to.have.status(400);\n    done();\n  });",
              "err": {
                "message": "TypeError: chai.request is not a function",
                "estack": "TypeError: chai.request is not a function\n    at Context.<anonymous> (test/appointments.test.js:53:10)\n    at process.processImmediate (node:internal/timers:485:21)",
                "diff": null
              },
              "uuid": "1754020d-8549-4a93-af98-cf30645bf866",
              "parentUUID": "5923c505-4a28-433b-a30c-f288a8297f9b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should allow overlapping appointment under relaxed strategy",
              "fullTitle": "Appointments API with Strategies should allow overlapping appointment under relaxed strategy",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "chai.request(server)\n  .post(\"/api/appointments\")\n  .send({\n    appointedBy: \"Sam\",\n    petName: \"Luna\",\n    vetName: \"Dr. Smith\",\n    appointDate: \"2025-09-30T10:00:00.000Z\", // overlaps but relaxed allows\n    duration: 30,\n    status: \"Scheduled\",\n    reason: \"Follow-up\",\n    strategy: \"relaxed\"\n  })\n  .end((err, res) => {\n    expect(res).to.have.status(201);\n    done();\n  });",
              "err": {
                "message": "TypeError: chai.request is not a function",
                "estack": "TypeError: chai.request is not a function\n    at Context.<anonymous> (test/appointments.test.js:73:10)\n    at process.processImmediate (node:internal/timers:485:21)",
                "diff": null
              },
              "uuid": "8f29ad2c-5941-4643-b0c7-10c1d7d7f885",
              "parentUUID": "5923c505-4a28-433b-a30c-f288a8297f9b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should allow emergency appointment even if overlapping",
              "fullTitle": "Appointments API with Strategies should allow emergency appointment even if overlapping",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "chai.request(server)\n  .post(\"/api/appointments\")\n  .send({\n    appointedBy: \"EmergencyUser\",\n    petName: \"Rocky\",\n    vetName: \"Dr. Smith\",\n    appointDate: \"2025-09-30T10:00:00.000Z\", // overlaps, but emergency\n    duration: 30,\n    status: \"Scheduled\",\n    reason: \"Emergency\",\n    strategy: \"priority\"\n  })\n  .end((err, res) => {\n    expect(res).to.have.status(201);\n    done();\n  });",
              "err": {
                "message": "TypeError: chai.request is not a function",
                "estack": "TypeError: chai.request is not a function\n    at Context.<anonymous> (test/appointments.test.js:93:10)\n    at process.processImmediate (node:internal/timers:485:21)",
                "diff": null
              },
              "uuid": "1911369f-9301-4d07-9ed8-07ec4a083d7c",
              "parentUUID": "5923c505-4a28-433b-a30c-f288a8297f9b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should allow small overlaps under flexible strategy",
              "fullTitle": "Appointments API with Strategies should allow small overlaps under flexible strategy",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "chai.request(server)\n  .post(\"/api/appointments\")\n  .send({\n    appointedBy: \"John\",\n    petName: \"Max\",\n    vetName: \"Dr. Smith\",\n    appointDate: \"2025-09-30T10:25:00.000Z\", // 5 min overlap allowed\n    duration: 30,\n    status: \"Scheduled\",\n    reason: \"Checkup\",\n    strategy: \"flexible\"\n  })\n  .end((err, res) => {\n    expect(res).to.have.status(201);\n    done();\n  });",
              "err": {
                "message": "TypeError: chai.request is not a function",
                "estack": "TypeError: chai.request is not a function\n    at Context.<anonymous> (test/appointments.test.js:113:10)\n    at process.processImmediate (node:internal/timers:485:21)",
                "diff": null
              },
              "uuid": "d81bb33e-6a60-45b9-94a2-01a4f667efd4",
              "parentUUID": "5923c505-4a28-433b-a30c-f288a8297f9b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should reject large overlaps under flexible strategy",
              "fullTitle": "Appointments API with Strategies should reject large overlaps under flexible strategy",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "chai.request(server)\n  .post(\"/api/appointments\")\n  .send({\n    appointedBy: \"Kate\",\n    petName: \"Bella\",\n    vetName: \"Dr. Smith\",\n    appointDate: \"2025-09-30T10:10:00.000Z\", // overlaps too much\n    duration: 30,\n    status: \"Scheduled\",\n    reason: \"Checkup\",\n    strategy: \"flexible\"\n  })\n  .end((err, res) => {\n    expect(res).to.have.status(400);\n    done();\n  });",
              "err": {
                "message": "TypeError: chai.request is not a function",
                "estack": "TypeError: chai.request is not a function\n    at Context.<anonymous> (test/appointments.test.js:132:10)\n    at process.processImmediate (node:internal/timers:485:21)",
                "diff": null
              },
              "uuid": "5faa4c18-449d-4142-b724-34f1029dceb2",
              "parentUUID": "5923c505-4a28-433b-a30c-f288a8297f9b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete appointment",
              "fullTitle": "Appointments API with Strategies should delete appointment",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "chai.request(server)\n  .delete(`/api/appointments/${createdId}`)\n  .end((err, res) => {\n    expect(res).to.have.status(200);\n    expect(res.body.message).to.equal(\"Appointment deleted\");\n    done();\n  });",
              "err": {
                "message": "TypeError: chai.request is not a function",
                "estack": "TypeError: chai.request is not a function\n    at Context.<anonymous> (test/appointments.test.js:152:10)\n    at process.processImmediate (node:internal/timers:485:21)",
                "diff": null
              },
              "uuid": "2c457ae9-7499-449c-ab8e-0b5018ba3bcd",
              "parentUUID": "5923c505-4a28-433b-a30c-f288a8297f9b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "cd3437fd-c350-4e01-b2e3-6fe2a890a963",
            "206728ab-b2c4-4eb6-85e9-0b6b405b596e",
            "1754020d-8549-4a93-af98-cf30645bf866",
            "8f29ad2c-5941-4643-b0c7-10c1d7d7f885",
            "1911369f-9301-4d07-9ed8-07ec4a083d7c",
            "d81bb33e-6a60-45b9-94a2-01a4f667efd4",
            "5faa4c18-449d-4142-b724-34f1029dceb2",
            "2c457ae9-7499-449c-ab8e-0b5018ba3bcd"
          ],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "e77485c5-e3cd-45e7-962f-a22aa7c9c5cd",
          "title": "App Flow Unit Tests (Register → Login → Edit Profile → Pet CRUD)",
          "fullFile": "/Users/jasper/IFN636_Assessment/backend/test/CreateAccount.test.js",
          "file": "/test/CreateAccount.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"App Flow Unit Tests (Register → Login → Edit Profile → Pet CRUD)\"",
              "fullTitle": "App Flow Unit Tests (Register → Login → Edit Profile → Pet CRUD) \"before each\" hook in \"App Flow Unit Tests (Register → Login → Edit Profile → Pet CRUD)\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sandbox = sinon.createSandbox();\n// Fresh req/res each test\nreq = { body: {}, params: {}, user: {} };\nres = {\n  status: sandbox.stub().returnsThis(),\n  json: sandbox.stub(),\n};",
              "err": {},
              "uuid": "d3b21221-c660-4f5b-8612-61540cfef630",
              "parentUUID": "e77485c5-e3cd-45e7-962f-a22aa7c9c5cd",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"App Flow Unit Tests (Register → Login → Edit Profile → Pet CRUD)\"",
              "fullTitle": "App Flow Unit Tests (Register → Login → Edit Profile → Pet CRUD) \"after each\" hook in \"App Flow Unit Tests (Register → Login → Edit Profile → Pet CRUD)\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sandbox.restore();",
              "err": {},
              "uuid": "300933d3-26d2-4cc4-a6cb-6b14deb958ef",
              "parentUUID": "e77485c5-e3cd-45e7-962f-a22aa7c9c5cd",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "R1: Register → creates account and returns token & role",
              "fullTitle": "App Flow Unit Tests (Register → Login → Edit Profile → Pet CRUD) R1: Register → creates account and returns token & role",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "req.body = {\n  name: \"Alice Vet\",\n  email: \"Alice@Example.com\",    // verify normalization\n  password: \"Passw0rd!\",\n  role: \"Vet\",                   // verify normalization\n};\n// Email not in use\nsandbox.stub(User, \"findOne\").resolves(null);\n// Created user returned by model\nsandbox.stub(User, \"create\").resolves({\n  _id: \"user_123\",\n  name: \"Alice Vet\",\n  email: \"alice@example.com\",\n  role: \"vet\",\n});\nsandbox.stub(jwt, \"sign\").returns(\"fake.jwt.token\");\nawait registerUser(req, res);\nexpect(User.findOne.calledOnceWith({ email: \"alice@example.com\" })).to.be.true;\nexpect(User.create.calledOnce).to.be.true;\nexpect(res.status.calledWith(201)).to.be.true;\nconst payload = res.json.firstCall.args[0];\nexpect(payload).to.include.keys([\"id\", \"name\", \"email\", \"role\", \"token\"]);\nexpect(payload.email).to.equal(\"alice@example.com\");\nexpect(payload.role).to.equal(\"vet\");",
              "err": {},
              "uuid": "e96e1d01-17cd-41e0-87d9-b7ef5e65dec2",
              "parentUUID": "e77485c5-e3cd-45e7-962f-a22aa7c9c5cd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Login: accepts valid credentials (encapsulation: checkPassword)",
              "fullTitle": "App Flow Unit Tests (Register → Login → Edit Profile → Pet CRUD) Login: accepts valid credentials (encapsulation: checkPassword)",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "req.body = { email: \"alice@example.com\", password: \"Passw0rd!\" };\n// When controller does: await User.findOne({email}).select(\"+password\")\n// we must return an object with .select() -> Promise<user>\nconst fakeUser = {\n  _id: \"user_123\",\n  name: \"Alice Vet\",\n  email: \"alice@example.com\",\n  role: \"vet\",\n  checkPassword: sandbox.stub().resolves(true), // encapsulated check\n};\nconst selectStub = sandbox.stub().returns(Promise.resolve(fakeUser));\nsandbox.stub(User, \"findOne\").returns({ select: selectStub });\nsandbox.stub(jwt, \"sign\").returns(\"fake.jwt.token\");\nawait loginUser(req, res);\nexpect(User.findOne.calledOnceWith({ email: \"alice@example.com\" })).to.be.true;\nexpect(selectStub.calledOnceWith(\"+password\")).to.be.true;\nexpect(fakeUser.checkPassword.calledOnceWith(\"Passw0rd!\")).to.be.true;\nexpect(res.status.called).to.be.false; // should be 200 implicitly\nconst body = res.json.firstCall.args[0];\nexpect(body).to.include.keys([\"id\", \"name\", \"email\", \"role\", \"token\"]);\nexpect(body.email).to.equal(\"alice@example.com\");",
              "err": {},
              "uuid": "b0bd126e-5291-4f65-b682-3f133c12712e",
              "parentUUID": "e77485c5-e3cd-45e7-962f-a22aa7c9c5cd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Edit profile: updates basic fields and returns user (no password leak)",
              "fullTitle": "App Flow Unit Tests (Register → Login → Edit Profile → Pet CRUD) Edit profile: updates basic fields and returns user (no password leak)",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "req.user = { id: \"user_123\" };\nreq.body = { name: \"Alice Updated\", phoneNumber: \"0400123456\" };\nconst updated = {\n  _id: \"user_123\",\n  name: \"Alice Updated\",\n  email: \"alice@example.com\",\n  role: \"vet\",\n  phoneNumber: \"0400123456\",\n};\nsandbox\n  .stub(User, \"findByIdAndUpdate\")\n  .resolves(updated); // controller usually does .select(\"-password\") or similar\nawait updateUserProfile(req, res);\nexpect(User.findByIdAndUpdate.calledOnce).to.be.true;\nexpect(res.status.called).to.be.false; // 200 default\nconst body = res.json.firstCall.args[0];\nexpect(body).to.include({ name: \"Alice Updated\", email: \"alice@example.com\" });\nexpect(body).to.not.have.property(\"password\");",
              "err": {
                "message": "AssertionError: expected false to be true",
                "estack": "AssertionError: expected false to be true\n    at Context.<anonymous> (test/CreateAccount.test.js:131:52)",
                "diff": "- false\n+ true\n"
              },
              "uuid": "8958001e-bef4-4cde-9399-c5aabf8ff14d",
              "parentUUID": "e77485c5-e3cd-45e7-962f-a22aa7c9c5cd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Pet: Create → adds a new pet for the current user",
              "fullTitle": "App Flow Unit Tests (Register → Login → Edit Profile → Pet CRUD) Pet: Create → adds a new pet for the current user",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "req.user = { id: \"user_123\", role: \"staff\" };\nreq.body = {\n  name: \"Buddy\",\n  species: \"Dog\",\n  age: 3,\n  allergyMed: \"None\",\n  ownerName: \"Alice\",\n  ownerPhone: \"0400123456\",\n  ownerEmail: \"alice@example.com\",\n};\nconst created = {\n  _id: \"pet_001\",\n  ...req.body,\n  ownerId: \"user_123\",\n};\nsandbox.stub(Pet, \"create\").resolves(created);\nawait addPet(req, res);\nexpect(Pet.create.calledOnce).to.be.true;\nexpect(res.status.calledWith(201)).to.be.true;\nexpect(res.json.calledWith(created)).to.be.true;",
              "err": {},
              "uuid": "99e30aa6-f2c7-43d1-b0c6-b3eb384e2fa4",
              "parentUUID": "e77485c5-e3cd-45e7-962f-a22aa7c9c5cd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Pet: Update → edits a pet by id",
              "fullTitle": "App Flow Unit Tests (Register → Login → Edit Profile → Pet CRUD) Pet: Update → edits a pet by id",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "req.user = { id: \"user_123\", role: \"staff\" };\nreq.params.id = \"pet_001\";\nreq.body = { age: 4 };\nconst updatedPet = {\n  _id: \"pet_001\",\n  name: \"Buddy\",\n  species: \"Dog\",\n  age: 4,\n  ownerId: \"user_123\",\n};\nsandbox.stub(Pet, \"findByIdAndUpdate\").resolves(updatedPet);\nawait updatePet(req, res);\nexpect(Pet.findByIdAndUpdate.calledOnce).to.be.true;\nexpect(res.status.called).to.be.false; // 200 default\nexpect(res.json.calledWith(updatedPet)).to.be.true;",
              "err": {},
              "uuid": "94372ca0-72da-4b8c-9d1c-8744dd54515c",
              "parentUUID": "e77485c5-e3cd-45e7-962f-a22aa7c9c5cd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Pet: Remove → deletes a pet by id",
              "fullTitle": "App Flow Unit Tests (Register → Login → Edit Profile → Pet CRUD) Pet: Remove → deletes a pet by id",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "req.user = { id: \"user_123\", role: \"staff\" };\nreq.params.id = \"pet_001\";\nsandbox.stub(Pet, \"findByIdAndDelete\").resolves({ _id: \"pet_001\" });\nawait deletePet(req, res);\nexpect(Pet.findByIdAndDelete.calledOnceWith(\"pet_001\")).to.be.true;\nexpect(res.status.called).to.be.false; // 200 default\nexpect(res.json.calledWithMatch({ message: \"Pet deleted\" })).to.be.true;",
              "err": {},
              "uuid": "aa45357b-8425-4fb9-9f4d-def1873514c7",
              "parentUUID": "e77485c5-e3cd-45e7-962f-a22aa7c9c5cd",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e96e1d01-17cd-41e0-87d9-b7ef5e65dec2",
            "b0bd126e-5291-4f65-b682-3f133c12712e",
            "99e30aa6-f2c7-43d1-b0c6-b3eb384e2fa4",
            "94372ca0-72da-4b8c-9d1c-8744dd54515c",
            "aa45357b-8425-4fb9-9f4d-def1873514c7"
          ],
          "failures": [
            "8958001e-bef4-4cde-9399-c5aabf8ff14d"
          ],
          "pending": [],
          "skipped": [],
          "duration": 5,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "9467a2b0-533e-4f55-a9e5-1a01ff8fef1c",
          "title": "Unit Test of Treatment Records",
          "fullFile": "/Users/jasper/IFN636_Assessment/backend/test/treatment_records.test.js",
          "file": "/test/treatment_records.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Unit Test of Treatment Records\"",
              "fullTitle": "Unit Test of Treatment Records \"before each\" hook in \"Unit Test of Treatment Records\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sandbox = sinon.createSandbox();\nreq = { body: {}, params: {} };\nres = {\n  status: sandbox.stub().returnsThis(),\n  json: sandbox.stub(),\n};",
              "err": {},
              "uuid": "683eda1a-9631-48af-be57-935393161121",
              "parentUUID": "9467a2b0-533e-4f55-a9e5-1a01ff8fef1c",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Unit Test of Treatment Records\"",
              "fullTitle": "Unit Test of Treatment Records \"after each\" hook in \"Unit Test of Treatment Records\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sandbox.restore();",
              "err": {},
              "uuid": "91ba7940-b68c-49f9-b323-8095158bfccb",
              "parentUUID": "9467a2b0-533e-4f55-a9e5-1a01ff8fef1c",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "#T1: should fail if Pet Name is empty",
              "fullTitle": "Unit Test of Treatment Records #T1: should fail if Pet Name is empty",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "req.body = { petName: \"\", vetName: \"Doctor Dolittle\" };\nconst treatment = new Treatment(req.body);\ntry {\n  await treatment.validate();\n  assert.fail(\"Validation should have failed\");\n} catch (err) {\n  assert.include(err.message, \"petName\");\n}",
              "err": {
                "message": "TypeError: Treatment is not a constructor",
                "estack": "TypeError: Treatment is not a constructor\n    at Context.<anonymous> (test/treatment_records.test.js:32:23)\n    at process.processImmediate (node:internal/timers:485:21)",
                "diff": null
              },
              "uuid": "fb0441c4-6f17-4c86-a008-9c13c18e156a",
              "parentUUID": "9467a2b0-533e-4f55-a9e5-1a01ff8fef1c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#T2: should fail if Vet Name is empty",
              "fullTitle": "Unit Test of Treatment Records #T2: should fail if Vet Name is empty",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "req.body = { petName: \"Habaobao\", vetName: \"\" };\nconst treatment = new Treatment(req.body);\ntry {\n  await treatment.validate();\n  assert.fail(\"Validation should have failed\");\n} catch (err) {\n  assert.include(err.message, \"vetName\");\n}",
              "err": {
                "message": "TypeError: Treatment is not a constructor",
                "estack": "TypeError: Treatment is not a constructor\n    at Context.<anonymous> (test/treatment_records.test.js:42:23)\n    at process.processImmediate (node:internal/timers:485:21)",
                "diff": null
              },
              "uuid": "058b69ed-8c1b-42e0-b848-46e467a4b2b7",
              "parentUUID": "9467a2b0-533e-4f55-a9e5-1a01ff8fef1c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#T3: should fail if Nurse Name is empty",
              "fullTitle": "Unit Test of Treatment Records #T3: should fail if Nurse Name is empty",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "req.body = {\n  petName: \"Habaobao\",\n  vetName: \"Doctor Dolittle\",\n  nurseName: \"\",\n};\nconst treatment = new Treatment(req.body);\ntry {\n  await treatment.validate();\n  assert.fail(\"Validation should have failed\");\n} catch (err) {\n  assert.include(err.message, \"nurseName\");\n}",
              "err": {
                "message": "TypeError: Treatment is not a constructor",
                "estack": "TypeError: Treatment is not a constructor\n    at Context.<anonymous> (test/treatment_records.test.js:56:23)\n    at process.processImmediate (node:internal/timers:485:21)",
                "diff": null
              },
              "uuid": "61204cc3-e710-4b32-a099-74bde2f1179b",
              "parentUUID": "9467a2b0-533e-4f55-a9e5-1a01ff8fef1c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#T4: should have Diagnosis Record",
              "fullTitle": "Unit Test of Treatment Records #T4: should have Diagnosis Record",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "req.body = {\n  petName: \"Habaobao\",\n  vetName: \"Doctor Dolittle\",\n  nurseName: \"Nancy\",\n  diagnosisRecords: [\n    { weight: \"1.9\", temperature: \"38.5\", symptoms: \"cough\" },\n  ],\n};\nconst treatment = new Treatment(req.body);\nawait treatment.validate();",
              "err": {
                "message": "TypeError: Treatment is not a constructor",
                "estack": "TypeError: Treatment is not a constructor\n    at Context.<anonymous> (test/treatment_records.test.js:73:23)\n    at process.processImmediate (node:internal/timers:485:21)",
                "diff": null
              },
              "uuid": "971f0264-1814-4216-bb7e-83fdb1ad8366",
              "parentUUID": "9467a2b0-533e-4f55-a9e5-1a01ff8fef1c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#T5: should have Medication",
              "fullTitle": "Unit Test of Treatment Records #T5: should have Medication",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "req.body = {\n  petName: \"Habaobao\",\n  vetName: \"Doctor Dolittle\",\n  nurseName: \"Nancy\",\n  medication: [\n    {\n      medicationName: \"Antibiotic\",\n      dose: \"5mg\",\n      frequency: \"2 pills per day\",\n    },\n  ],\n};\nconst treatment = new Treatment(req.body);\nawait treatment.validate();",
              "err": {
                "message": "TypeError: Treatment is not a constructor",
                "estack": "TypeError: Treatment is not a constructor\n    at Context.<anonymous> (test/treatment_records.test.js:90:23)\n    at process.processImmediate (node:internal/timers:485:21)",
                "diff": null
              },
              "uuid": "16c1d264-e2bd-4bbc-82e8-d96232cc87e2",
              "parentUUID": "9467a2b0-533e-4f55-a9e5-1a01ff8fef1c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#T6: should have Vaccination",
              "fullTitle": "Unit Test of Treatment Records #T6: should have Vaccination",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "req.body = {\n  petName: \"Habaobao\",\n  vetName: \"Doctor Dolittle\",\n  nurseName: \"Nancy\",\n  vaccination: [\n    { vaccineName: \"Triple Vaccine\", vaccinationDate: \"2025-09-27\" },\n  ],\n};\nconst treatment = new Treatment(req.body);\nawait treatment.validate();",
              "err": {
                "message": "TypeError: Treatment is not a constructor",
                "estack": "TypeError: Treatment is not a constructor\n    at Context.<anonymous> (test/treatment_records.test.js:103:23)\n    at process.processImmediate (node:internal/timers:485:21)",
                "diff": null
              },
              "uuid": "77d3d5c0-bf2d-44fa-954f-4e41601af018",
              "parentUUID": "9467a2b0-533e-4f55-a9e5-1a01ff8fef1c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#T7: if have followUp and followUpDate",
              "fullTitle": "Unit Test of Treatment Records #T7: if have followUp and followUpDate",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "req.body = {\n  petName: \"Habaobao\",\n  vetName: \"Doctor Dolittle\",\n  nurseName: \"Nancy\",\n  followUp: true,\n  followUpDate: \"2025-10-20\",\n};\nconst treatment = new Treatment(req.body);\nawait treatment.validate();",
              "err": {
                "message": "TypeError: Treatment is not a constructor",
                "estack": "TypeError: Treatment is not a constructor\n    at Context.<anonymous> (test/treatment_records.test.js:114:23)\n    at process.processImmediate (node:internal/timers:485:21)",
                "diff": null
              },
              "uuid": "0b174b43-bbe2-46f5-85ae-bd2fc874c525",
              "parentUUID": "9467a2b0-533e-4f55-a9e5-1a01ff8fef1c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#T8: should include Payment and check isPaid",
              "fullTitle": "Unit Test of Treatment Records #T8: should include Payment and check isPaid",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "req.body = {\n  petName: \"Habaobao\",\n  vetName: \"Doctor Dolittle\",\n  nurseName: \"Nancy\",\n  payment: \"111\",\n  isPaid: true,\n};\nconst treatment = new Treatment(req.body);\nawait treatment.validate();",
              "err": {
                "message": "TypeError: Treatment is not a constructor",
                "estack": "TypeError: Treatment is not a constructor\n    at Context.<anonymous> (test/treatment_records.test.js:125:23)\n    at process.processImmediate (node:internal/timers:485:21)",
                "diff": null
              },
              "uuid": "47a3a458-a62e-43ea-990a-0cecb77afc82",
              "parentUUID": "9467a2b0-533e-4f55-a9e5-1a01ff8fef1c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#T9: should add a new treatment",
              "fullTitle": "Unit Test of Treatment Records #T9: should add a new treatment",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "req.body = { petName: \"Habaobao\", vetName: \"Doctor Dolittle\" };\nconst fakeTreatment = { ...req.body, _id: \"001\" };\nsandbox.stub(Treatment.prototype, \"save\").resolves(fakeTreatment);\nawait addTreatment(req, res);\nexpect(res.status.calledWith(201)).to.be.true;\nexpect(res.json.calledWith(fakeTreatment)).to.be.true;",
              "err": {
                "message": "Error: Trying to stub property 'save' of undefined",
                "estack": "Error: Trying to stub property 'save' of undefined\n    at throwOnFalsyObject (node_modules/sinon/lib/sinon/throw-on-falsy-object.js:7:15)\n    at Function.stub (node_modules/sinon/lib/sinon/stub.js:79:24)\n    at Sandbox.stub (node_modules/sinon/lib/sinon/sandbox.js:455:39)\n    at Context.<anonymous> (test/treatment_records.test.js:134:13)\n    at process.processImmediate (node:internal/timers:485:21)",
                "diff": null
              },
              "uuid": "c2d0c55d-00b6-4ef6-b3fd-e62e35e499a8",
              "parentUUID": "9467a2b0-533e-4f55-a9e5-1a01ff8fef1c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#T10: should return all treatments",
              "fullTitle": "Unit Test of Treatment Records #T10: should return all treatments",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const fakeList = [{ _id: \"001\", petName: \"Habaobao\" }];\nsandbox.stub(Treatment, \"find\").resolves(fakeList);\nawait getTreatments(req, res);\nexpect(res.status.calledWith(200)).to.be.true;\nexpect(res.json.calledWith(fakeList)).to.be.true;",
              "err": {
                "message": "TypeError: Cannot stub non-existent property find",
                "estack": "TypeError: Cannot stub non-existent property find\n    at Function.stub (node_modules/sinon/lib/sinon/stub.js:82:15)\n    at Sandbox.stub (node_modules/sinon/lib/sinon/sandbox.js:455:39)\n    at Context.<anonymous> (test/treatment_records.test.js:145:13)\n    at process.processImmediate (node:internal/timers:485:21)",
                "diff": null
              },
              "uuid": "6047fb95-addc-46c4-bea1-46763f808ef4",
              "parentUUID": "9467a2b0-533e-4f55-a9e5-1a01ff8fef1c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#T11: should update a treatment",
              "fullTitle": "Unit Test of Treatment Records #T11: should update a treatment",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "req.params.id = \"001\";\nreq.body = { vetName: \"Doctor Dolittle\" };\nconst fakeUpdated = {\n  _id: \"001\",\n  petName: \"Habaobao\",\n  vetName: \"Doctor Dolittle\",\n};\nsandbox.stub(Treatment, \"findByIdAndUpdate\").resolves(fakeUpdated);\nawait updateTreatment(req, res);\nexpect(res.status.calledWith(200)).to.be.true;\nexpect(res.json.calledWith(fakeUpdated)).to.be.true;",
              "err": {
                "message": "TypeError: Cannot stub non-existent property findByIdAndUpdate",
                "estack": "TypeError: Cannot stub non-existent property findByIdAndUpdate\n    at Function.stub (node_modules/sinon/lib/sinon/stub.js:82:15)\n    at Sandbox.stub (node_modules/sinon/lib/sinon/sandbox.js:455:39)\n    at Context.<anonymous> (test/treatment_records.test.js:163:13)\n    at process.processImmediate (node:internal/timers:485:21)",
                "diff": null
              },
              "uuid": "a1355e72-80a3-4023-ad4f-fc6b7212bb33",
              "parentUUID": "9467a2b0-533e-4f55-a9e5-1a01ff8fef1c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#T12: should delete a treatment",
              "fullTitle": "Unit Test of Treatment Records #T12: should delete a treatment",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "req.params.id = \"001\";\nsandbox.stub(Treatment, \"findByIdAndDelete\").resolves({ _id: \"001\" });\nawait deleteTreatment(req, res);\nexpect(res.status.calledWith(200)).to.be.true;\nexpect(res.json.calledWithMatch({ message: \"Treatment deleted\" })).to.be\n  .true;",
              "err": {
                "message": "TypeError: Cannot stub non-existent property findByIdAndDelete",
                "estack": "TypeError: Cannot stub non-existent property findByIdAndDelete\n    at Function.stub (node_modules/sinon/lib/sinon/stub.js:82:15)\n    at Sandbox.stub (node_modules/sinon/lib/sinon/sandbox.js:455:39)\n    at Context.<anonymous> (test/treatment_records.test.js:175:13)\n    at process.processImmediate (node:internal/timers:485:21)",
                "diff": null
              },
              "uuid": "ad396434-3b03-42ab-89d5-8f0ea2fb5c86",
              "parentUUID": "9467a2b0-533e-4f55-a9e5-1a01ff8fef1c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#T13: should remove a Diagnosis Record",
              "fullTitle": "Unit Test of Treatment Records #T13: should remove a Diagnosis Record",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const treatment = new Treatment({\n  petName: \"Habaobao\",\n  vetName: \"Doctor Dolittle\",\n  nurseName: \"Nancy\",\n  diagnosisRecords: [\n    { weight: \"1.9\", temperature: \"38.5\", symptoms: \"cough\" },\n  ],\n});\nsandbox.stub(Treatment.prototype, \"save\").resolves(treatment);\nawait treatment.save();\ntreatment.diagnosisRecords.id(treatment.diagnosisRecords[0]._id).remove();\nawait treatment.save();\nexpect(treatment.diagnosisRecords).to.have.lengthOf(0);",
              "err": {
                "message": "TypeError: Treatment is not a constructor",
                "estack": "TypeError: Treatment is not a constructor\n    at Context.<anonymous> (test/treatment_records.test.js:184:23)\n    at process.processImmediate (node:internal/timers:485:21)",
                "diff": null
              },
              "uuid": "fdd6ff2a-0f12-4afe-836e-d8df7aa3cbcd",
              "parentUUID": "9467a2b0-533e-4f55-a9e5-1a01ff8fef1c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#T14: should remove a Medication",
              "fullTitle": "Unit Test of Treatment Records #T14: should remove a Medication",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const treatment = new Treatment({\n  petName: \"Habaobao\",\n  vetName: \"Doctor Dolittle\",\n  nurseName: \"Nancy\",\n  medication: [\n    {\n      medicationName: \"Antibiotic\",\n      dose: \"5mg\",\n      frequency: \"2 pills per day\",\n    },\n  ],\n});\nsandbox.stub(Treatment.prototype, \"save\").resolves(treatment);\nawait treatment.save();\ntreatment.medication.id(treatment.medication[0]._id).remove();\nawait treatment.save();\nexpect(treatment.medication).to.have.lengthOf(0);",
              "err": {
                "message": "TypeError: Treatment is not a constructor",
                "estack": "TypeError: Treatment is not a constructor\n    at Context.<anonymous> (test/treatment_records.test.js:203:23)\n    at process.processImmediate (node:internal/timers:485:21)",
                "diff": null
              },
              "uuid": "72456758-3bbe-4f68-84cf-8ef52898090b",
              "parentUUID": "9467a2b0-533e-4f55-a9e5-1a01ff8fef1c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#T15: should remove a Vaccination",
              "fullTitle": "Unit Test of Treatment Records #T15: should remove a Vaccination",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const treatment = new Treatment({\n  petName: \"Habaobao\",\n  vetName: \"Doctor Dolittle\",\n  nurseName: \"Nancy\",\n  vaccination: [\n    { vaccineName: \"Triple Vaccine\", vaccinationDate: \"2025-09-27\" },\n  ],\n});\nsandbox.stub(Treatment.prototype, \"save\").resolves(treatment);\nawait treatment.save();\ntreatment.vaccination.id(treatment.vaccination[0]._id).remove();\nawait treatment.save();\nexpect(treatment.vaccination).to.have.lengthOf(0);",
              "err": {
                "message": "TypeError: Treatment is not a constructor",
                "estack": "TypeError: Treatment is not a constructor\n    at Context.<anonymous> (test/treatment_records.test.js:227:23)\n    at process.processImmediate (node:internal/timers:485:21)",
                "diff": null
              },
              "uuid": "df249dfc-906e-43bd-85bf-9c3b0ffbc24f",
              "parentUUID": "9467a2b0-533e-4f55-a9e5-1a01ff8fef1c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "fb0441c4-6f17-4c86-a008-9c13c18e156a",
            "058b69ed-8c1b-42e0-b848-46e467a4b2b7",
            "61204cc3-e710-4b32-a099-74bde2f1179b",
            "971f0264-1814-4216-bb7e-83fdb1ad8366",
            "16c1d264-e2bd-4bbc-82e8-d96232cc87e2",
            "77d3d5c0-bf2d-44fa-954f-4e41601af018",
            "0b174b43-bbe2-46f5-85ae-bd2fc874c525",
            "47a3a458-a62e-43ea-990a-0cecb77afc82",
            "c2d0c55d-00b6-4ef6-b3fd-e62e35e499a8",
            "6047fb95-addc-46c4-bea1-46763f808ef4",
            "a1355e72-80a3-4023-ad4f-fc6b7212bb33",
            "ad396434-3b03-42ab-89d5-8f0ea2fb5c86",
            "fdd6ff2a-0f12-4afe-836e-d8df7aa3cbcd",
            "72456758-3bbe-4f68-84cf-8ef52898090b",
            "df249dfc-906e-43bd-85bf-9c3b0ffbc24f"
          ],
          "pending": [],
          "skipped": [],
          "duration": 3,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.7.4"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.3.1"
    },
    "marge": {
      "options": {
        "reportDir": "mochawesome-report",
        "reportFilename": "mochawesome"
      },
      "version": "5.2.0"
    }
  }
}