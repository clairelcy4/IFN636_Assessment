{
  "stats": {
    "suites": 3,
    "tests": 24,
    "passes": 21,
    "pending": 0,
    "failures": 3,
    "start": "2025-09-30T22:15:06.451Z",
    "end": "2025-09-30T22:15:06.525Z",
    "duration": 74,
    "testsRegistered": 24,
    "passPercent": 87.5,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "004d688b-b1ae-4a5d-88e1-a4d13de42f0e",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "cf0da107-e0fb-47d3-a9c1-fb75fddccdc5",
          "title": "Appointments API with Strategies",
          "fullFile": "/Users/clairelin/Library/CloudStorage/OneDrive-QueenslandUniversityofTechnology/202507_Y1S2/IFN636_Software Life Cycle Management/Assessment 1/sdlapps/backend/test/appointments.test.js",
          "file": "/test/appointments.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should create appointment under strict strategy",
              "fullTitle": "Appointments API with Strategies should create appointment under strict strategy",
              "timedOut": false,
              "duration": 14,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(server)\n  .post(\"/api/appointments\")\n  .send({\n    appointedBy: \"Alice\",\n    petName: \"Buddy\",\n    vetName: \"Dr. Smith\",\n    appointDate: \"2025-09-30T10:00:00.000Z\",\n    duration: 30,\n    status: \"Scheduled\",\n    reason: \"Checkup\",\n    strategy: \"strict\"\n  })\n  .end((err, res) => {\n    expect(res).to.have.status(201);\n    createdId = res.body._id;\n    done();\n  });",
              "err": {},
              "uuid": "78e98655-1e22-4894-9afd-30e26c1781bf",
              "parentUUID": "cf0da107-e0fb-47d3-a9c1-fb75fddccdc5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should reject overlapping appointment under strict strategy",
              "fullTitle": "Appointments API with Strategies should reject overlapping appointment under strict strategy",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(server)\n  .post(\"/api/appointments\")\n  .send({\n    appointedBy: \"Bob\",\n    petName: \"Charlie\",\n    vetName: \"Dr. Smith\",\n    appointDate: \"2025-09-30T10:00:00.000Z\", // same time as Alice\n    duration: 30,\n    status: \"Scheduled\",\n    reason: \"Vaccination\",\n    strategy: \"strict\"\n  })\n  .end((err, res) => {\n    expect(res).to.have.status(400);\n    done();\n  });",
              "err": {},
              "uuid": "8cf3578b-8574-42b0-b96b-0ff882464059",
              "parentUUID": "cf0da107-e0fb-47d3-a9c1-fb75fddccdc5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should reject appointments within buffer time",
              "fullTitle": "Appointments API with Strategies should reject appointments within buffer time",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(server)\n  .post(\"/api/appointments\")\n  .send({\n    appointedBy: \"Eve\",\n    petName: \"Milo\",\n    vetName: \"Dr. Smith\",\n    appointDate: \"2025-09-30T10:20:00.000Z\", // within 15min buffer\n    duration: 30,\n    status: \"Scheduled\",\n    reason: \"Surgery\",\n    strategy: \"buffer\"\n  })\n  .end((err, res) => {\n    expect(res).to.have.status(400);\n    done();\n  });",
              "err": {},
              "uuid": "40d19bea-7b6c-47f7-bf81-48b154ed7382",
              "parentUUID": "cf0da107-e0fb-47d3-a9c1-fb75fddccdc5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should allow overlapping appointment under relaxed strategy",
              "fullTitle": "Appointments API with Strategies should allow overlapping appointment under relaxed strategy",
              "timedOut": false,
              "duration": 2,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "chai.request(server)\n  .post(\"/api/appointments\")\n  .send({\n    appointedBy: \"Sam\",\n    petName: \"Luna\",\n    vetName: \"Dr. Smith\",\n    appointDate: \"2025-09-30T10:00:00.000Z\", // overlaps but relaxed allows\n    duration: 30,\n    status: \"Scheduled\",\n    reason: \"Follow-up\",\n    strategy: \"relaxed\"\n  })\n  .end((err, res) => {\n    expect(res).to.have.status(201);\n    done();\n  });",
              "err": {
                "message": "AssertionError: expected Response{ _events: {}, …(34), …(2) } to have status code 201 but got 400",
                "estack": "AssertionError: expected Response{ _events: {}, …(34), …(2) } to have status code 201 but got 400\n    at /Users/clairelin/Library/CloudStorage/OneDrive-QueenslandUniversityofTechnology/202507_Y1S2/IFN636_Software Life Cycle Management/Assessment 1/sdlapps/backend/test/appointments.test.js:86:29\n    at Request.callback (node_modules/superagent/lib/node/index.js:716:12)\n    at /Users/clairelin/Library/CloudStorage/OneDrive-QueenslandUniversityofTechnology/202507_Y1S2/IFN636_Software Life Cycle Management/Assessment 1/sdlapps/backend/node_modules/superagent/lib/node/index.js:916:18\n    at IncomingMessage.<anonymous> (node_modules/superagent/lib/node/parsers/json.js:19:7)\n    at IncomingMessage.emit (node:events:530:35)\n    at endReadableNT (node:internal/streams/readable:1698:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:90:21)",
                "diff": "- 400\n+ 201\n"
              },
              "uuid": "22ae1819-cc2b-4050-aa7b-51c968d80498",
              "parentUUID": "cf0da107-e0fb-47d3-a9c1-fb75fddccdc5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should allow emergency appointment even if overlapping",
              "fullTitle": "Appointments API with Strategies should allow emergency appointment even if overlapping",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(server)\n  .post(\"/api/appointments\")\n  .send({\n    appointedBy: \"EmergencyUser\",\n    petName: \"Rocky\",\n    vetName: \"Dr. Smith\",\n    appointDate: \"2025-09-30T10:00:00.000Z\", // overlaps, but emergency\n    duration: 30,\n    status: \"Scheduled\",\n    reason: \"Emergency\",\n    strategy: \"priority\"\n  })\n  .end((err, res) => {\n    expect(res).to.have.status(201);\n    done();\n  });",
              "err": {},
              "uuid": "11bd4a10-82fe-45fe-a535-2d7d05cf3f19",
              "parentUUID": "cf0da107-e0fb-47d3-a9c1-fb75fddccdc5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should allow small overlaps under flexible strategy",
              "fullTitle": "Appointments API with Strategies should allow small overlaps under flexible strategy",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(server)\n  .post(\"/api/appointments\")\n  .send({\n    appointedBy: \"John\",\n    petName: \"Max\",\n    vetName: \"Dr. Smith\",\n    appointDate: \"2025-09-30T10:25:00.000Z\", // 5 min overlap allowed\n    duration: 30,\n    status: \"Scheduled\",\n    reason: \"Checkup\",\n    strategy: \"flexible\"\n  })\n  .end((err, res) => {\n    expect(res).to.have.status(201);\n    done();\n  });",
              "err": {},
              "uuid": "47f065dd-3b0a-425b-85ed-1b215643f619",
              "parentUUID": "cf0da107-e0fb-47d3-a9c1-fb75fddccdc5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should reject large overlaps under flexible strategy",
              "fullTitle": "Appointments API with Strategies should reject large overlaps under flexible strategy",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(server)\n  .post(\"/api/appointments\")\n  .send({\n    appointedBy: \"Kate\",\n    petName: \"Bella\",\n    vetName: \"Dr. Smith\",\n    appointDate: \"2025-09-30T10:10:00.000Z\", // overlaps too much\n    duration: 30,\n    status: \"Scheduled\",\n    reason: \"Checkup\",\n    strategy: \"flexible\"\n  })\n  .end((err, res) => {\n    expect(res).to.have.status(400);\n    done();\n  });",
              "err": {},
              "uuid": "e6000fa7-3e13-4063-b142-7a94a3b1a083",
              "parentUUID": "cf0da107-e0fb-47d3-a9c1-fb75fddccdc5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete appointment",
              "fullTitle": "Appointments API with Strategies should delete appointment",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(server)\n  .delete(`/api/appointments/${createdId}`)\n  .end((err, res) => {\n    expect(res).to.have.status(200);\n    expect(res.body.message).to.equal(\"Appointment deleted\");\n    done();\n  });",
              "err": {},
              "uuid": "1eb18018-ece6-4417-a0b5-12797443d343",
              "parentUUID": "cf0da107-e0fb-47d3-a9c1-fb75fddccdc5",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "78e98655-1e22-4894-9afd-30e26c1781bf",
            "8cf3578b-8574-42b0-b96b-0ff882464059",
            "40d19bea-7b6c-47f7-bf81-48b154ed7382",
            "11bd4a10-82fe-45fe-a535-2d7d05cf3f19",
            "47f065dd-3b0a-425b-85ed-1b215643f619",
            "e6000fa7-3e13-4063-b142-7a94a3b1a083",
            "1eb18018-ece6-4417-a0b5-12797443d343"
          ],
          "failures": [
            "22ae1819-cc2b-4050-aa7b-51c968d80498"
          ],
          "pending": [],
          "skipped": [],
          "duration": 26,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "3b5d0018-e425-49f3-844b-aca2556e0c64",
          "title": "Unit Test: Create Account (registerUser)",
          "fullFile": "/Users/clairelin/Library/CloudStorage/OneDrive-QueenslandUniversityofTechnology/202507_Y1S2/IFN636_Software Life Cycle Management/Assessment 1/sdlapps/backend/test/CreateAccount.test.js",
          "file": "/test/CreateAccount.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Unit Test: Create Account (registerUser)\"",
              "fullTitle": "Unit Test: Create Account (registerUser) \"before each\" hook in \"Unit Test: Create Account (registerUser)\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sandbox = sinon.createSandbox();\nreq = {\n  body: {\n    name: \"Alice Vet\",\n    email: \"Alice@Example.com\", // mixed case to verify normalization\n    password: \"Passw0rd!\",\n    role: \"Vet\",                \n  },\n};\nres = {\n  status: sandbox.stub().returnsThis(),\n  json: sandbox.stub(),\n};\n\nsandbox.stub(User, \"findOne\").resolves(null);\n\n   \nsandbox.stub(User, \"create\").resolves({\n  _id: \"user_123\",\n  name: \"Alice Vet\",\n  email: \"alice@example.com\",  \n  role: \"vet\",                \n});\n\n \nsandbox.stub(jwt, \"sign\").returns(\"fake.jwt.token\");",
              "err": {},
              "uuid": "df2e43db-bb19-490c-87bb-e02b2d214f4e",
              "parentUUID": "3b5d0018-e425-49f3-844b-aca2556e0c64",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Unit Test: Create Account (registerUser)\"",
              "fullTitle": "Unit Test: Create Account (registerUser) \"after each\" hook in \"Unit Test: Create Account (registerUser)\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sandbox.restore();",
              "err": {},
              "uuid": "f4a5cf55-14ad-4736-925d-729c8d03704e",
              "parentUUID": "3b5d0018-e425-49f3-844b-aca2556e0c64",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "#R1: registers a new user and returns token + role",
              "fullTitle": "Unit Test: Create Account (registerUser) #R1: registers a new user and returns token + role",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await registerUser(req, res);\nexpect(User.findOne.calledOnceWith({ email: \"alice@example.com\" })).to.be.true;\nexpect(User.create.calledOnce).to.be.true;\n\n \nexpect(res.status.calledWith(201)).to.be.true;\nexpect(res.json.calledOnce).to.be.true;\nconst payload = res.json.firstCall.args[0];\nexpect(payload).to.include.keys([\"id\", \"name\", \"email\", \"role\", \"token\"]);\nexpect(payload.name).to.equal(\"Alice Vet\");\nexpect(payload.email).to.equal(\"alice@example.com\");\nexpect(payload.role).to.equal(\"vet\");\nexpect(payload.token).to.equal(\"fake.jwt.token\");",
              "err": {},
              "uuid": "7a54539b-67cc-4900-bfab-62347cae1777",
              "parentUUID": "3b5d0018-e425-49f3-844b-aca2556e0c64",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "7a54539b-67cc-4900-bfab-62347cae1777"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "7f35063c-6ee6-476b-b6d2-c9ad45ede31d",
          "title": "Unit Test of Treatment Records",
          "fullFile": "/Users/clairelin/Library/CloudStorage/OneDrive-QueenslandUniversityofTechnology/202507_Y1S2/IFN636_Software Life Cycle Management/Assessment 1/sdlapps/backend/test/treatment_records.test.js",
          "file": "/test/treatment_records.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Unit Test of Treatment Records\"",
              "fullTitle": "Unit Test of Treatment Records \"before each\" hook in \"Unit Test of Treatment Records\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sandbox = sinon.createSandbox();\nreq = { body: {}, params: {} };\nres = {\n  status: sandbox.stub().returnsThis(),\n  json: sandbox.stub(),\n};",
              "err": {},
              "uuid": "797946ad-2f1d-4082-aa94-30690db31888",
              "parentUUID": "7f35063c-6ee6-476b-b6d2-c9ad45ede31d",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Unit Test of Treatment Records\"",
              "fullTitle": "Unit Test of Treatment Records \"after each\" hook in \"Unit Test of Treatment Records\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sandbox.restore();",
              "err": {},
              "uuid": "7c08aa77-7201-4ab2-a45b-9c736953cd7e",
              "parentUUID": "7f35063c-6ee6-476b-b6d2-c9ad45ede31d",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "#T1: should fail if Pet Name is empty",
              "fullTitle": "Unit Test of Treatment Records #T1: should fail if Pet Name is empty",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "req.body = { petName: \"\", vetName: \"Doctor Dolittle\" };\nconst treatment = new Treatment(req.body);\ntry {\n  await treatment.validate();\n  assert.fail(\"Validation should have failed\");\n} catch (err) {\n  assert.include(err.message, \"petName\");\n}",
              "err": {},
              "uuid": "c3072bec-e1cb-481e-a5ec-2132ec43deb3",
              "parentUUID": "7f35063c-6ee6-476b-b6d2-c9ad45ede31d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#T2: should fail if Vet Name is empty",
              "fullTitle": "Unit Test of Treatment Records #T2: should fail if Vet Name is empty",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "req.body = { petName: \"Habaobao\", vetName: \"\" };\nconst treatment = new Treatment(req.body);\ntry {\n  await treatment.validate();\n  assert.fail(\"Validation should have failed\");\n} catch (err) {\n  assert.include(err.message, \"vetName\");\n}",
              "err": {
                "message": "AssertionError: expected 'Validation should have failed' to include 'vetName'",
                "estack": "AssertionError: expected 'Validation should have failed' to include 'vetName'\n    at Context.<anonymous> (test/treatment_records.test.js:47:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)",
                "diff": null
              },
              "uuid": "2630d190-cde1-4b66-97c7-ac0c5d31b830",
              "parentUUID": "7f35063c-6ee6-476b-b6d2-c9ad45ede31d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#T3: should fail if Nurse Name is empty",
              "fullTitle": "Unit Test of Treatment Records #T3: should fail if Nurse Name is empty",
              "timedOut": false,
              "duration": 2,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "req.body = {\n  petName: \"Habaobao\",\n  vetName: \"Doctor Dolittle\",\n  nurseName: \"\",\n};\nconst treatment = new Treatment(req.body);\ntry {\n  await treatment.validate();\n  assert.fail(\"Validation should have failed\");\n} catch (err) {\n  assert.include(err.message, \"nurseName\");\n}",
              "err": {
                "message": "AssertionError: expected 'Validation should have failed' to include 'nurseName'",
                "estack": "AssertionError: expected 'Validation should have failed' to include 'nurseName'\n    at Context.<anonymous> (test/treatment_records.test.js:61:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)",
                "diff": null
              },
              "uuid": "dc68d702-e799-46bf-941f-5d5cc7534b5c",
              "parentUUID": "7f35063c-6ee6-476b-b6d2-c9ad45ede31d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#T4: should have Diagnosis Record",
              "fullTitle": "Unit Test of Treatment Records #T4: should have Diagnosis Record",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "req.body = {\n  petName: \"Habaobao\",\n  vetName: \"Doctor Dolittle\",\n  nurseName: \"Nancy\",\n  diagnosisRecords: [\n    { weight: \"1.9\", temperature: \"38.5\", symptoms: \"cough\" },\n  ],\n};\nconst treatment = new Treatment(req.body);\nawait treatment.validate();",
              "err": {},
              "uuid": "aacf601f-b372-4481-be43-7d4bb7df7599",
              "parentUUID": "7f35063c-6ee6-476b-b6d2-c9ad45ede31d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#T5: should have Medication",
              "fullTitle": "Unit Test of Treatment Records #T5: should have Medication",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "req.body = {\n  petName: \"Habaobao\",\n  vetName: \"Doctor Dolittle\",\n  nurseName: \"Nancy\",\n  medication: [\n    {\n      medicationName: \"Antibiotic\",\n      dose: \"5mg\",\n      frequency: \"2 pills per day\",\n    },\n  ],\n};\nconst treatment = new Treatment(req.body);\nawait treatment.validate();",
              "err": {},
              "uuid": "db817929-3e8e-4d99-8c43-43f372295916",
              "parentUUID": "7f35063c-6ee6-476b-b6d2-c9ad45ede31d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#T6: should have Vaccination",
              "fullTitle": "Unit Test of Treatment Records #T6: should have Vaccination",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "req.body = {\n  petName: \"Habaobao\",\n  vetName: \"Doctor Dolittle\",\n  nurseName: \"Nancy\",\n  vaccination: [\n    { vaccineName: \"Triple Vaccine\", vaccinationDate: \"2025-09-27\" },\n  ],\n};\nconst treatment = new Treatment(req.body);\nawait treatment.validate();",
              "err": {},
              "uuid": "d42c5ca0-f2cd-4d14-b585-4bc4adaca5fd",
              "parentUUID": "7f35063c-6ee6-476b-b6d2-c9ad45ede31d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#T7: if have followUp and followUpDate",
              "fullTitle": "Unit Test of Treatment Records #T7: if have followUp and followUpDate",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "req.body = {\n  petName: \"Habaobao\",\n  vetName: \"Doctor Dolittle\",\n  nurseName: \"Nancy\",\n  followUp: true,\n  followUpDate: \"2025-10-20\",\n};\nconst treatment = new Treatment(req.body);\nawait treatment.validate();",
              "err": {},
              "uuid": "0187f0a1-3079-47a2-8714-e07849cb0797",
              "parentUUID": "7f35063c-6ee6-476b-b6d2-c9ad45ede31d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#T8: should include Payment and check isPaid",
              "fullTitle": "Unit Test of Treatment Records #T8: should include Payment and check isPaid",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "req.body = {\n  petName: \"Habaobao\",\n  vetName: \"Doctor Dolittle\",\n  nurseName: \"Nancy\",\n  payment: \"111\",\n  isPaid: true,\n};\nconst treatment = new Treatment(req.body);\nawait treatment.validate();",
              "err": {},
              "uuid": "dcc1e08a-81de-4d0e-b0dd-a696c734aed1",
              "parentUUID": "7f35063c-6ee6-476b-b6d2-c9ad45ede31d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#T9: should add a new treatment",
              "fullTitle": "Unit Test of Treatment Records #T9: should add a new treatment",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "req.body = { petName: \"Habaobao\", vetName: \"Doctor Dolittle\" };\nconst fakeTreatment = { ...req.body, _id: \"001\" };\nsandbox.stub(Treatment.prototype, \"save\").resolves(fakeTreatment);\nawait addTreatment(req, res);\nexpect(res.status.calledWith(201)).to.be.true;\nexpect(res.json.calledWith(fakeTreatment)).to.be.true;",
              "err": {},
              "uuid": "23c6ab15-1c0d-437d-9b9c-38e23ada0ac5",
              "parentUUID": "7f35063c-6ee6-476b-b6d2-c9ad45ede31d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#T10: should return all treatments",
              "fullTitle": "Unit Test of Treatment Records #T10: should return all treatments",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fakeList = [{ _id: \"001\", petName: \"Habaobao\" }];\nsandbox.stub(Treatment, \"find\").resolves(fakeList);\nawait getTreatments(req, res);\nexpect(res.status.calledWith(200)).to.be.true;\nexpect(res.json.calledWith(fakeList)).to.be.true;",
              "err": {},
              "uuid": "a10d6c37-c91c-4b6a-88f9-7c81007cec6d",
              "parentUUID": "7f35063c-6ee6-476b-b6d2-c9ad45ede31d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#T11: should update a treatment",
              "fullTitle": "Unit Test of Treatment Records #T11: should update a treatment",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "req.params.id = \"001\";\nreq.body = { vetName: \"Doctor Dolittle\" };\nconst fakeUpdated = {\n  _id: \"001\",\n  petName: \"Habaobao\",\n  vetName: \"Doctor Dolittle\",\n};\nsandbox.stub(Treatment, \"findByIdAndUpdate\").resolves(fakeUpdated);\nawait updateTreatment(req, res);\nexpect(res.status.calledWith(200)).to.be.true;\nexpect(res.json.calledWith(fakeUpdated)).to.be.true;",
              "err": {},
              "uuid": "b213099d-d789-4785-900a-2bae6676620b",
              "parentUUID": "7f35063c-6ee6-476b-b6d2-c9ad45ede31d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#T12: should delete a treatment",
              "fullTitle": "Unit Test of Treatment Records #T12: should delete a treatment",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "req.params.id = \"001\";\nsandbox.stub(Treatment, \"findByIdAndDelete\").resolves({ _id: \"001\" });\nawait deleteTreatment(req, res);\nexpect(res.status.calledWith(200)).to.be.true;\nexpect(res.json.calledWithMatch({ message: \"Treatment deleted\" })).to.be\n  .true;",
              "err": {},
              "uuid": "11497f5a-5577-4334-aec1-345c518ee4f2",
              "parentUUID": "7f35063c-6ee6-476b-b6d2-c9ad45ede31d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#T13: should remove a Diagnosis Record",
              "fullTitle": "Unit Test of Treatment Records #T13: should remove a Diagnosis Record",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const treatment = new Treatment({\n  petName: \"Habaobao\",\n  vetName: \"Doctor Dolittle\",\n  nurseName: \"Nancy\",\n  diagnosisRecords: [\n    { weight: \"1.9\", temperature: \"38.5\", symptoms: \"cough\" },\n  ],\n});\nsandbox.stub(Treatment.prototype, \"save\").resolves(treatment);\nawait treatment.save();\ntreatment.diagnosisRecords.id(treatment.diagnosisRecords[0]._id).remove();\nawait treatment.save();\nexpect(treatment.diagnosisRecords).to.have.lengthOf(0);",
              "err": {},
              "uuid": "dfda7b8b-c7bd-436b-aa7e-32097a847545",
              "parentUUID": "7f35063c-6ee6-476b-b6d2-c9ad45ede31d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#T14: should remove a Medication",
              "fullTitle": "Unit Test of Treatment Records #T14: should remove a Medication",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const treatment = new Treatment({\n  petName: \"Habaobao\",\n  vetName: \"Doctor Dolittle\",\n  nurseName: \"Nancy\",\n  medication: [\n    {\n      medicationName: \"Antibiotic\",\n      dose: \"5mg\",\n      frequency: \"2 pills per day\",\n    },\n  ],\n});\nsandbox.stub(Treatment.prototype, \"save\").resolves(treatment);\nawait treatment.save();\ntreatment.medication.id(treatment.medication[0]._id).remove();\nawait treatment.save();\nexpect(treatment.medication).to.have.lengthOf(0);",
              "err": {},
              "uuid": "1f907fe3-5c5a-4b9a-9d45-6c6f3f71dbc2",
              "parentUUID": "7f35063c-6ee6-476b-b6d2-c9ad45ede31d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#T15: should remove a Vaccination",
              "fullTitle": "Unit Test of Treatment Records #T15: should remove a Vaccination",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const treatment = new Treatment({\n  petName: \"Habaobao\",\n  vetName: \"Doctor Dolittle\",\n  nurseName: \"Nancy\",\n  vaccination: [\n    { vaccineName: \"Triple Vaccine\", vaccinationDate: \"2025-09-27\" },\n  ],\n});\nsandbox.stub(Treatment.prototype, \"save\").resolves(treatment);\nawait treatment.save();\ntreatment.vaccination.id(treatment.vaccination[0]._id).remove();\nawait treatment.save();\nexpect(treatment.vaccination).to.have.lengthOf(0);",
              "err": {},
              "uuid": "ebf3e56e-ab4c-4e4a-bda7-a8ba79558cda",
              "parentUUID": "7f35063c-6ee6-476b-b6d2-c9ad45ede31d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c3072bec-e1cb-481e-a5ec-2132ec43deb3",
            "aacf601f-b372-4481-be43-7d4bb7df7599",
            "db817929-3e8e-4d99-8c43-43f372295916",
            "d42c5ca0-f2cd-4d14-b585-4bc4adaca5fd",
            "0187f0a1-3079-47a2-8714-e07849cb0797",
            "dcc1e08a-81de-4d0e-b0dd-a696c734aed1",
            "23c6ab15-1c0d-437d-9b9c-38e23ada0ac5",
            "a10d6c37-c91c-4b6a-88f9-7c81007cec6d",
            "b213099d-d789-4785-900a-2bae6676620b",
            "11497f5a-5577-4334-aec1-345c518ee4f2",
            "dfda7b8b-c7bd-436b-aa7e-32097a847545",
            "1f907fe3-5c5a-4b9a-9d45-6c6f3f71dbc2",
            "ebf3e56e-ab4c-4e4a-bda7-a8ba79558cda"
          ],
          "failures": [
            "2630d190-cde1-4b66-97c7-ac0c5d31b830",
            "dc68d702-e799-46bf-941f-5d5cc7534b5c"
          ],
          "pending": [],
          "skipped": [],
          "duration": 14,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.3.1"
    },
    "marge": {
      "options": {
        "reportDir": "mochawesome-report",
        "reportFilename": "mochawesome"
      },
      "version": "5.2.0"
    }
  }
}