{
  "stats": {
    "suites": 1,
    "tests": 15,
    "passes": 13,
    "pending": 0,
    "failures": 2,
    "start": "2025-09-27T07:58:42.918Z",
    "end": "2025-09-27T07:58:42.936Z",
    "duration": 18,
    "testsRegistered": 15,
    "passPercent": 86.66666666666667,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "c9a847bf-13a1-4816-b680-f80f3364c913",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "a0695848-5810-4aec-b66a-dd2b12f9d01c",
          "title": "Unit Test of Treatment Records",
          "fullFile": "/Users/clairelin/Library/CloudStorage/OneDrive-QueenslandUniversityofTechnology/202507_Y1S2/IFN636_Software Life Cycle Management/Assessment 1/sdlapps/backend/test/treatment_records.test.js",
          "file": "/test/treatment_records.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Unit Test of Treatment Records\"",
              "fullTitle": "Unit Test of Treatment Records \"before each\" hook in \"Unit Test of Treatment Records\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sandbox = sinon.createSandbox();\nreq = { body: {}, params: {} };\nres = {\n  status: sandbox.stub().returnsThis(),\n  json: sandbox.stub(),\n};",
              "err": {},
              "uuid": "adc03c60-db4f-45f9-9941-a3efd4d7c057",
              "parentUUID": "a0695848-5810-4aec-b66a-dd2b12f9d01c",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Unit Test of Treatment Records\"",
              "fullTitle": "Unit Test of Treatment Records \"after each\" hook in \"Unit Test of Treatment Records\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sandbox.restore();",
              "err": {},
              "uuid": "081c971b-b790-4041-88b2-e88b16a86abe",
              "parentUUID": "a0695848-5810-4aec-b66a-dd2b12f9d01c",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "#T1: should fail if Pet Name is empty",
              "fullTitle": "Unit Test of Treatment Records #T1: should fail if Pet Name is empty",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "req.body = { petName: \"\", vetName: \"Doctor Dolittle\" };\nconst treatment = new Treatment(req.body);\ntry {\n  await treatment.validate();\n  assert.fail(\"Validation should have failed\");\n} catch (err) {\n  assert.include(err.message, \"petName\");\n}",
              "err": {},
              "uuid": "239d577f-8ef3-4797-b940-92d510b3d5f2",
              "parentUUID": "a0695848-5810-4aec-b66a-dd2b12f9d01c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#T2: should fail if Vet Name is empty",
              "fullTitle": "Unit Test of Treatment Records #T2: should fail if Vet Name is empty",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "req.body = { petName: \"Habaobao\", vetName: \"\" };\nconst treatment = new Treatment(req.body);\ntry {\n  await treatment.validate();\n  assert.fail(\"Validation should have failed\");\n} catch (err) {\n  assert.include(err.message, \"vetName\");\n}",
              "err": {
                "message": "AssertionError: expected 'Validation should have failed' to include 'vetName'",
                "estack": "AssertionError: expected 'Validation should have failed' to include 'vetName'\n    at Context.<anonymous> (test/treatment_records.test.js:47:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)",
                "diff": null
              },
              "uuid": "d5b9d189-e58f-49ad-907d-26cc12c509b5",
              "parentUUID": "a0695848-5810-4aec-b66a-dd2b12f9d01c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#T3: should fail if Nurse Name is empty",
              "fullTitle": "Unit Test of Treatment Records #T3: should fail if Nurse Name is empty",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "req.body = {\n  petName: \"Habaobao\",\n  vetName: \"Doctor Dolittle\",\n  nurseName: \"\",\n};\nconst treatment = new Treatment(req.body);\ntry {\n  await treatment.validate();\n  assert.fail(\"Validation should have failed\");\n} catch (err) {\n  assert.include(err.message, \"nurseName\");\n}",
              "err": {
                "message": "AssertionError: expected 'Validation should have failed' to include 'nurseName'",
                "estack": "AssertionError: expected 'Validation should have failed' to include 'nurseName'\n    at Context.<anonymous> (test/treatment_records.test.js:61:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)",
                "diff": null
              },
              "uuid": "630d6e5e-8710-435c-99a0-96b78cb8a97b",
              "parentUUID": "a0695848-5810-4aec-b66a-dd2b12f9d01c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#T4: should have Diagnosis Record",
              "fullTitle": "Unit Test of Treatment Records #T4: should have Diagnosis Record",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "req.body = {\n  petName: \"Habaobao\",\n  vetName: \"Doctor Dolittle\",\n  nurseName: \"Nancy\",\n  diagnosisRecords: [\n    { weight: \"1.9\", temperature: \"38.5\", symptoms: \"cough\" },\n  ],\n};\nconst treatment = new Treatment(req.body);\nawait treatment.validate();",
              "err": {},
              "uuid": "22baa89f-5c95-4cf4-bbf3-878b19511a60",
              "parentUUID": "a0695848-5810-4aec-b66a-dd2b12f9d01c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#T5: should have Medication",
              "fullTitle": "Unit Test of Treatment Records #T5: should have Medication",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "req.body = {\n  petName: \"Habaobao\",\n  vetName: \"Doctor Dolittle\",\n  nurseName: \"Nancy\",\n  medication: [\n    {\n      medicationName: \"Antibiotic\",\n      dose: \"5mg\",\n      frequency: \"2 pills per day\",\n    },\n  ],\n};\nconst treatment = new Treatment(req.body);\nawait treatment.validate();",
              "err": {},
              "uuid": "e6a7d237-f183-4d64-9ea7-8c2aaefeb85d",
              "parentUUID": "a0695848-5810-4aec-b66a-dd2b12f9d01c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#T6: should have Vaccination",
              "fullTitle": "Unit Test of Treatment Records #T6: should have Vaccination",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "req.body = {\n  petName: \"Habaobao\",\n  vetName: \"Doctor Dolittle\",\n  nurseName: \"Nancy\",\n  vaccination: [\n    { vaccineName: \"Triple Vaccine\", vaccinationDate: \"2025-09-27\" },\n  ],\n};\nconst treatment = new Treatment(req.body);\nawait treatment.validate();",
              "err": {},
              "uuid": "376ad2e4-839f-47fc-8252-09d69f3725ea",
              "parentUUID": "a0695848-5810-4aec-b66a-dd2b12f9d01c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#T7: if have followUp and followUpDate",
              "fullTitle": "Unit Test of Treatment Records #T7: if have followUp and followUpDate",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "req.body = {\n  petName: \"Habaobao\",\n  vetName: \"Doctor Dolittle\",\n  nurseName: \"Nancy\",\n  followUp: true,\n  followUpDate: \"2025-10-20\",\n};\nconst treatment = new Treatment(req.body);\nawait treatment.validate();",
              "err": {},
              "uuid": "b2fb9960-7f75-45e7-9132-26c618bd4646",
              "parentUUID": "a0695848-5810-4aec-b66a-dd2b12f9d01c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#T8: should include Payment and check isPaid",
              "fullTitle": "Unit Test of Treatment Records #T8: should include Payment and check isPaid",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "req.body = {\n  petName: \"Habaobao\",\n  vetName: \"Doctor Dolittle\",\n  nurseName: \"Nancy\",\n  payment: \"111\",\n  isPaid: true,\n};\nconst treatment = new Treatment(req.body);\nawait treatment.validate();",
              "err": {},
              "uuid": "28b7477f-d279-4a26-9b10-a15f53e17115",
              "parentUUID": "a0695848-5810-4aec-b66a-dd2b12f9d01c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#T9: should add a new treatment",
              "fullTitle": "Unit Test of Treatment Records #T9: should add a new treatment",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "req.body = { petName: \"Habaobao\", vetName: \"Doctor Dolittle\" };\nconst fakeTreatment = { ...req.body, _id: \"001\" };\nsandbox.stub(Treatment.prototype, \"save\").resolves(fakeTreatment);\nawait addTreatment(req, res);\nexpect(res.status.calledWith(201)).to.be.true;\nexpect(res.json.calledWith(fakeTreatment)).to.be.true;",
              "err": {},
              "uuid": "72c354ec-8dfd-49b1-b4ef-2689e64fdcfa",
              "parentUUID": "a0695848-5810-4aec-b66a-dd2b12f9d01c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#T10: should return all treatments",
              "fullTitle": "Unit Test of Treatment Records #T10: should return all treatments",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fakeList = [{ _id: \"001\", petName: \"Habaobao\" }];\nsandbox.stub(Treatment, \"find\").resolves(fakeList);\nawait getTreatments(req, res);\nexpect(res.status.calledWith(200)).to.be.true;\nexpect(res.json.calledWith(fakeList)).to.be.true;",
              "err": {},
              "uuid": "30dee2f9-acfc-4838-8365-8b8a64fe1fb0",
              "parentUUID": "a0695848-5810-4aec-b66a-dd2b12f9d01c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#T11: should update a treatment",
              "fullTitle": "Unit Test of Treatment Records #T11: should update a treatment",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "req.params.id = \"001\";\nreq.body = { vetName: \"Doctor Dolittle\" };\nconst fakeUpdated = {\n  _id: \"001\",\n  petName: \"Habaobao\",\n  vetName: \"Doctor Dolittle\",\n};\nsandbox.stub(Treatment, \"findByIdAndUpdate\").resolves(fakeUpdated);\nawait updateTreatment(req, res);\nexpect(res.status.calledWith(200)).to.be.true;\nexpect(res.json.calledWith(fakeUpdated)).to.be.true;",
              "err": {},
              "uuid": "dc6fb87c-af4a-480a-a700-70ec098e40f8",
              "parentUUID": "a0695848-5810-4aec-b66a-dd2b12f9d01c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#T12: should delete a treatment",
              "fullTitle": "Unit Test of Treatment Records #T12: should delete a treatment",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "req.params.id = \"001\";\nsandbox.stub(Treatment, \"findByIdAndDelete\").resolves({ _id: \"001\" });\nawait deleteTreatment(req, res);\nexpect(res.status.calledWith(200)).to.be.true;\nexpect(res.json.calledWithMatch({ message: \"Treatment deleted\" })).to.be\n  .true;",
              "err": {},
              "uuid": "aa9c1b54-9385-4248-8ed8-c5d0388ec136",
              "parentUUID": "a0695848-5810-4aec-b66a-dd2b12f9d01c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#T13: should remove a Diagnosis Record",
              "fullTitle": "Unit Test of Treatment Records #T13: should remove a Diagnosis Record",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const treatment = new Treatment({\n  petName: \"Habaobao\",\n  vetName: \"Doctor Dolittle\",\n  nurseName: \"Nancy\",\n  diagnosisRecords: [\n    { weight: \"1.9\", temperature: \"38.5\", symptoms: \"cough\" },\n  ],\n});\nsandbox.stub(Treatment.prototype, \"save\").resolves(treatment);\nawait treatment.save();\ntreatment.diagnosisRecords.id(treatment.diagnosisRecords[0]._id).remove();\nawait treatment.save();\nexpect(treatment.diagnosisRecords).to.have.lengthOf(0);",
              "err": {},
              "uuid": "8c1639f5-d20c-4ee4-81e2-87295422a4a0",
              "parentUUID": "a0695848-5810-4aec-b66a-dd2b12f9d01c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#T14: should remove a Medication",
              "fullTitle": "Unit Test of Treatment Records #T14: should remove a Medication",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const treatment = new Treatment({\n  petName: \"Habaobao\",\n  vetName: \"Doctor Dolittle\",\n  nurseName: \"Nancy\",\n  medication: [\n    {\n      medicationName: \"Antibiotic\",\n      dose: \"5mg\",\n      frequency: \"2 pills per day\",\n    },\n  ],\n});\nsandbox.stub(Treatment.prototype, \"save\").resolves(treatment);\nawait treatment.save();\ntreatment.medication.id(treatment.medication[0]._id).remove();\nawait treatment.save();\nexpect(treatment.medication).to.have.lengthOf(0);",
              "err": {},
              "uuid": "59c1b65d-e704-4a3e-b944-0bd981e55be3",
              "parentUUID": "a0695848-5810-4aec-b66a-dd2b12f9d01c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#T15: should remove a Vaccination",
              "fullTitle": "Unit Test of Treatment Records #T15: should remove a Vaccination",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const treatment = new Treatment({\n  petName: \"Habaobao\",\n  vetName: \"Doctor Dolittle\",\n  nurseName: \"Nancy\",\n  vaccination: [\n    { vaccineName: \"Triple Vaccine\", vaccinationDate: \"2025-09-27\" },\n  ],\n});\nsandbox.stub(Treatment.prototype, \"save\").resolves(treatment);\nawait treatment.save();\ntreatment.vaccination.id(treatment.vaccination[0]._id).remove();\nawait treatment.save();\nexpect(treatment.vaccination).to.have.lengthOf(0);",
              "err": {},
              "uuid": "21371b63-e06a-4977-ba22-6385434e5cd3",
              "parentUUID": "a0695848-5810-4aec-b66a-dd2b12f9d01c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "239d577f-8ef3-4797-b940-92d510b3d5f2",
            "22baa89f-5c95-4cf4-bbf3-878b19511a60",
            "e6a7d237-f183-4d64-9ea7-8c2aaefeb85d",
            "376ad2e4-839f-47fc-8252-09d69f3725ea",
            "b2fb9960-7f75-45e7-9132-26c618bd4646",
            "28b7477f-d279-4a26-9b10-a15f53e17115",
            "72c354ec-8dfd-49b1-b4ef-2689e64fdcfa",
            "30dee2f9-acfc-4838-8365-8b8a64fe1fb0",
            "dc6fb87c-af4a-480a-a700-70ec098e40f8",
            "aa9c1b54-9385-4248-8ed8-c5d0388ec136",
            "8c1639f5-d20c-4ee4-81e2-87295422a4a0",
            "59c1b65d-e704-4a3e-b944-0bd981e55be3",
            "21371b63-e06a-4977-ba22-6385434e5cd3"
          ],
          "failures": [
            "d5b9d189-e58f-49ad-907d-26cc12c509b5",
            "630d6e5e-8710-435c-99a0-96b78cb8a97b"
          ],
          "pending": [],
          "skipped": [],
          "duration": 10,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.3.1"
    },
    "marge": {
      "options": {
        "reportDir": "mochawesome-report",
        "reportFilename": "mochawesome"
      },
      "version": "5.2.0"
    }
  }
}