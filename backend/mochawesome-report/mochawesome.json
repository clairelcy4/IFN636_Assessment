{
  "stats": {
    "suites": 3,
    "tests": 24,
    "passes": 23,
    "pending": 0,
    "failures": 1,
    "start": "2025-10-02T06:10:22.412Z",
    "end": "2025-10-02T06:10:22.455Z",
    "duration": 43,
    "testsRegistered": 24,
    "passPercent": 95.83333333333334,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "a4846bbe-86b8-475c-8443-910adb65bd23",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "f76d63ad-6826-4408-a3da-675d7cec8d93",
          "title": "Appointments API with Strategies",
          "fullFile": "/Users/clairelin/Library/CloudStorage/OneDrive-QueenslandUniversityofTechnology/202507_Y1S2/IFN636_Software Life Cycle Management/Assessment 1/sdlapps/backend/test/appointments.test.js",
          "file": "/test/appointments.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should create appointment under strict strategy",
              "fullTitle": "Appointments API with Strategies should create appointment under strict strategy",
              "timedOut": false,
              "duration": 13,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(server)\n  .post(\"/api/appointments\")\n  .send({\n    appointedBy: \"Alice\",\n    petName: \"Buddy\",\n    vetName: \"Dr. Smith\",\n    appointDate: \"2025-09-30T10:00:00.000Z\",\n    duration: 30,\n    status: \"Scheduled\",\n    reason: \"Checkup\",\n    strategy: \"strict\"\n  })\n  .end((err, res) => {\n    expect(res).to.have.status(201);\n    createdId = res.body._id;\n    done();\n  });",
              "err": {},
              "uuid": "54a91825-4a67-4d1b-b4c0-cef80c754dff",
              "parentUUID": "f76d63ad-6826-4408-a3da-675d7cec8d93",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should reject overlapping appointment under strict strategy",
              "fullTitle": "Appointments API with Strategies should reject overlapping appointment under strict strategy",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(server)\n  .post(\"/api/appointments\")\n  .send({\n    appointedBy: \"Bob\",\n    petName: \"Charlie\",\n    vetName: \"Dr. Smith\",\n    appointDate: \"2025-09-30T10:00:00.000Z\", // same time as Alice\n    duration: 30,\n    status: \"Scheduled\",\n    reason: \"Vaccination\",\n    strategy: \"strict\"\n  })\n  .end((err, res) => {\n    expect(res).to.have.status(400);\n    done();\n  });",
              "err": {},
              "uuid": "534053d6-91e9-4da1-adf3-3de05bc3a451",
              "parentUUID": "f76d63ad-6826-4408-a3da-675d7cec8d93",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should reject appointments within buffer time",
              "fullTitle": "Appointments API with Strategies should reject appointments within buffer time",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(server)\n  .post(\"/api/appointments\")\n  .send({\n    appointedBy: \"Eve\",\n    petName: \"Milo\",\n    vetName: \"Dr. Smith\",\n    appointDate: \"2025-09-30T10:20:00.000Z\", // within 15min buffer\n    duration: 30,\n    status: \"Scheduled\",\n    reason: \"Surgery\",\n    strategy: \"buffer\"\n  })\n  .end((err, res) => {\n    expect(res).to.have.status(400);\n    done();\n  });",
              "err": {},
              "uuid": "4d5258b3-54fb-48eb-a1cb-ab8b7d30cc4f",
              "parentUUID": "f76d63ad-6826-4408-a3da-675d7cec8d93",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should allow overlapping appointment under relaxed strategy",
              "fullTitle": "Appointments API with Strategies should allow overlapping appointment under relaxed strategy",
              "timedOut": false,
              "duration": 2,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "chai.request(server)\n  .post(\"/api/appointments\")\n  .send({\n    appointedBy: \"Sam\",\n    petName: \"Luna\",\n    vetName: \"Dr. Smith\",\n    appointDate: \"2025-09-30T10:00:00.000Z\", // overlaps but relaxed allows\n    duration: 30,\n    status: \"Scheduled\",\n    reason: \"Follow-up\",\n    strategy: \"relaxed\"\n  })\n  .end((err, res) => {\n    expect(res).to.have.status(201);\n    done();\n  });",
              "err": {
                "message": "AssertionError: expected Response{ _events: {}, …(34), …(2) } to have status code 201 but got 400",
                "estack": "AssertionError: expected Response{ _events: {}, …(34), …(2) } to have status code 201 but got 400\n    at /Users/clairelin/Library/CloudStorage/OneDrive-QueenslandUniversityofTechnology/202507_Y1S2/IFN636_Software Life Cycle Management/Assessment 1/sdlapps/backend/test/appointments.test.js:86:29\n    at Request.callback (node_modules/superagent/lib/node/index.js:716:12)\n    at /Users/clairelin/Library/CloudStorage/OneDrive-QueenslandUniversityofTechnology/202507_Y1S2/IFN636_Software Life Cycle Management/Assessment 1/sdlapps/backend/node_modules/superagent/lib/node/index.js:916:18\n    at IncomingMessage.<anonymous> (node_modules/superagent/lib/node/parsers/json.js:19:7)\n    at IncomingMessage.emit (node:events:530:35)\n    at endReadableNT (node:internal/streams/readable:1698:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:90:21)",
                "diff": "- 400\n+ 201\n"
              },
              "uuid": "6818de99-6885-4e28-aec3-f375a71d37a7",
              "parentUUID": "f76d63ad-6826-4408-a3da-675d7cec8d93",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should allow emergency appointment even if overlapping",
              "fullTitle": "Appointments API with Strategies should allow emergency appointment even if overlapping",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(server)\n  .post(\"/api/appointments\")\n  .send({\n    appointedBy: \"EmergencyUser\",\n    petName: \"Rocky\",\n    vetName: \"Dr. Smith\",\n    appointDate: \"2025-09-30T10:00:00.000Z\", // overlaps, but emergency\n    duration: 30,\n    status: \"Scheduled\",\n    reason: \"Emergency\",\n    strategy: \"priority\"\n  })\n  .end((err, res) => {\n    expect(res).to.have.status(201);\n    done();\n  });",
              "err": {},
              "uuid": "717db726-84b8-42e3-af28-fad7bee8125c",
              "parentUUID": "f76d63ad-6826-4408-a3da-675d7cec8d93",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should allow small overlaps under flexible strategy",
              "fullTitle": "Appointments API with Strategies should allow small overlaps under flexible strategy",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(server)\n  .post(\"/api/appointments\")\n  .send({\n    appointedBy: \"John\",\n    petName: \"Max\",\n    vetName: \"Dr. Smith\",\n    appointDate: \"2025-09-30T10:25:00.000Z\", // 5 min overlap allowed\n    duration: 30,\n    status: \"Scheduled\",\n    reason: \"Checkup\",\n    strategy: \"flexible\"\n  })\n  .end((err, res) => {\n    expect(res).to.have.status(201);\n    done();\n  });",
              "err": {},
              "uuid": "4e137ccd-f2ed-4a10-8ad8-4024924df497",
              "parentUUID": "f76d63ad-6826-4408-a3da-675d7cec8d93",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should reject large overlaps under flexible strategy",
              "fullTitle": "Appointments API with Strategies should reject large overlaps under flexible strategy",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(server)\n  .post(\"/api/appointments\")\n  .send({\n    appointedBy: \"Kate\",\n    petName: \"Bella\",\n    vetName: \"Dr. Smith\",\n    appointDate: \"2025-09-30T10:10:00.000Z\", // overlaps too much\n    duration: 30,\n    status: \"Scheduled\",\n    reason: \"Checkup\",\n    strategy: \"flexible\"\n  })\n  .end((err, res) => {\n    expect(res).to.have.status(400);\n    done();\n  });",
              "err": {},
              "uuid": "fa085800-4c77-49e1-8121-d33bc7cda100",
              "parentUUID": "f76d63ad-6826-4408-a3da-675d7cec8d93",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete appointment",
              "fullTitle": "Appointments API with Strategies should delete appointment",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(server)\n  .delete(`/api/appointments/${createdId}`)\n  .end((err, res) => {\n    expect(res).to.have.status(200);\n    expect(res.body.message).to.equal(\"Appointment deleted\");\n    done();\n  });",
              "err": {},
              "uuid": "60670199-e0d4-448e-adff-7c4e9f771f64",
              "parentUUID": "f76d63ad-6826-4408-a3da-675d7cec8d93",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "54a91825-4a67-4d1b-b4c0-cef80c754dff",
            "534053d6-91e9-4da1-adf3-3de05bc3a451",
            "4d5258b3-54fb-48eb-a1cb-ab8b7d30cc4f",
            "717db726-84b8-42e3-af28-fad7bee8125c",
            "4e137ccd-f2ed-4a10-8ad8-4024924df497",
            "fa085800-4c77-49e1-8121-d33bc7cda100",
            "60670199-e0d4-448e-adff-7c4e9f771f64"
          ],
          "failures": [
            "6818de99-6885-4e28-aec3-f375a71d37a7"
          ],
          "pending": [],
          "skipped": [],
          "duration": 23,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "e7162505-5b03-4f94-bfbd-d7a48b583b0d",
          "title": "Unit Test: Create Account (registerUser)",
          "fullFile": "/Users/clairelin/Library/CloudStorage/OneDrive-QueenslandUniversityofTechnology/202507_Y1S2/IFN636_Software Life Cycle Management/Assessment 1/sdlapps/backend/test/CreateAccount.test.js",
          "file": "/test/CreateAccount.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Unit Test: Create Account (registerUser)\"",
              "fullTitle": "Unit Test: Create Account (registerUser) \"before each\" hook in \"Unit Test: Create Account (registerUser)\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sandbox = sinon.createSandbox();\nreq = {\n  body: {\n    name: \"Alice Vet\",\n    email: \"Alice@Example.com\", // mixed case to verify normalization\n    password: \"Passw0rd!\",\n    role: \"Vet\",                \n  },\n};\nres = {\n  status: sandbox.stub().returnsThis(),\n  json: sandbox.stub(),\n};\n\nsandbox.stub(User, \"findOne\").resolves(null);\n\n   \nsandbox.stub(User, \"create\").resolves({\n  _id: \"user_123\",\n  name: \"Alice Vet\",\n  email: \"alice@example.com\",  \n  role: \"vet\",                \n});\n\n \nsandbox.stub(jwt, \"sign\").returns(\"fake.jwt.token\");",
              "err": {},
              "uuid": "7ed818ec-87ac-4196-846a-55879968b6b9",
              "parentUUID": "e7162505-5b03-4f94-bfbd-d7a48b583b0d",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Unit Test: Create Account (registerUser)\"",
              "fullTitle": "Unit Test: Create Account (registerUser) \"after each\" hook in \"Unit Test: Create Account (registerUser)\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sandbox.restore();",
              "err": {},
              "uuid": "c04a66bd-a952-41dc-9129-53ead7b978a1",
              "parentUUID": "e7162505-5b03-4f94-bfbd-d7a48b583b0d",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "#R1: registers a new user and returns token + role",
              "fullTitle": "Unit Test: Create Account (registerUser) #R1: registers a new user and returns token + role",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await registerUser(req, res);\nexpect(User.findOne.calledOnceWith({ email: \"alice@example.com\" })).to.be.true;\nexpect(User.create.calledOnce).to.be.true;\n\n \nexpect(res.status.calledWith(201)).to.be.true;\nexpect(res.json.calledOnce).to.be.true;\nconst payload = res.json.firstCall.args[0];\nexpect(payload).to.include.keys([\"id\", \"name\", \"email\", \"role\", \"token\"]);\nexpect(payload.name).to.equal(\"Alice Vet\");\nexpect(payload.email).to.equal(\"alice@example.com\");\nexpect(payload.role).to.equal(\"vet\");\nexpect(payload.token).to.equal(\"fake.jwt.token\");",
              "err": {},
              "uuid": "c07c4fcf-b0cb-4798-8849-5cbd34d12b13",
              "parentUUID": "e7162505-5b03-4f94-bfbd-d7a48b583b0d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c07c4fcf-b0cb-4798-8849-5cbd34d12b13"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "1c7e7a14-5d0c-4ae9-9967-059d707644d1",
          "title": "Unit Test of Treatment Records",
          "fullFile": "/Users/clairelin/Library/CloudStorage/OneDrive-QueenslandUniversityofTechnology/202507_Y1S2/IFN636_Software Life Cycle Management/Assessment 1/sdlapps/backend/test/treatment_records.test.js",
          "file": "/test/treatment_records.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Unit Test of Treatment Records\"",
              "fullTitle": "Unit Test of Treatment Records \"before each\" hook in \"Unit Test of Treatment Records\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sandbox = sinon.createSandbox();\nreq = { body: {}, params: {} };\nres = {\n  status: sandbox.stub().returnsThis(),\n  json: sandbox.stub(),\n};",
              "err": {},
              "uuid": "b006b3d8-af3d-4a45-8ba6-88371da5ebdc",
              "parentUUID": "1c7e7a14-5d0c-4ae9-9967-059d707644d1",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Unit Test of Treatment Records\"",
              "fullTitle": "Unit Test of Treatment Records \"after each\" hook in \"Unit Test of Treatment Records\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sandbox.restore();",
              "err": {},
              "uuid": "894818f1-f9e3-4dcf-a55d-ab6db02342be",
              "parentUUID": "1c7e7a14-5d0c-4ae9-9967-059d707644d1",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "#T1: should fail if Pet Name is empty",
              "fullTitle": "Unit Test of Treatment Records #T1: should fail if Pet Name is empty",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "req.body = { petName: \"\", vetName: \"Doctor Dolittle\" };\nconst treatment = new Treatment(req.body);\ntry {\n  await treatment.validate();\n  assert.fail(\"Validation should have failed\");\n} catch (err) {\n  assert.include(err.message, \"petName\");\n}",
              "err": {},
              "uuid": "f29f0c32-5243-42ca-8711-8b632e30b576",
              "parentUUID": "1c7e7a14-5d0c-4ae9-9967-059d707644d1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#T2: should fail if Vet Name is empty",
              "fullTitle": "Unit Test of Treatment Records #T2: should fail if Vet Name is empty",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "req.body = { petName: \"Habaobao\", vetName: \"\" };\nconst treatment = new Treatment(req.body);\ntry {\n  await treatment.validate();\n  assert.fail(\"Validation should have failed\");\n} catch (err) {\n  assert.include(err.message, \"vetName\");\n}",
              "err": {},
              "uuid": "2a305c70-cc30-42ae-94fc-ef967f274720",
              "parentUUID": "1c7e7a14-5d0c-4ae9-9967-059d707644d1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#T3: should fail if Nurse Name is empty",
              "fullTitle": "Unit Test of Treatment Records #T3: should fail if Nurse Name is empty",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "req.body = {\n  petName: \"Habaobao\",\n  vetName: \"Doctor Dolittle\",\n  nurseName: \"\",\n};\nconst treatment = new Treatment(req.body);\ntry {\n  await treatment.validate();\n  assert.fail(\"Validation should have failed\");\n} catch (err) {\n  assert.include(err.message, \"nurseName\");\n}",
              "err": {},
              "uuid": "abf76ee9-298d-4b9b-8110-366e742ccd6f",
              "parentUUID": "1c7e7a14-5d0c-4ae9-9967-059d707644d1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#T4: should have Diagnosis Record",
              "fullTitle": "Unit Test of Treatment Records #T4: should have Diagnosis Record",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "req.body = {\n  petName: \"Habaobao\",\n  vetName: \"Doctor Dolittle\",\n  nurseName: \"Nancy\",\n  diagnosisRecords: [\n    { weight: \"1.9\", temperature: \"38.5\", symptoms: \"cough\" },\n  ],\n};\nconst treatment = new Treatment(req.body);\nawait treatment.validate();",
              "err": {},
              "uuid": "91c7ff23-1749-42cb-9507-ce21f4dbf535",
              "parentUUID": "1c7e7a14-5d0c-4ae9-9967-059d707644d1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#T5: should have Medication",
              "fullTitle": "Unit Test of Treatment Records #T5: should have Medication",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "req.body = {\n  petName: \"Habaobao\",\n  vetName: \"Doctor Dolittle\",\n  nurseName: \"Nancy\",\n  medication: [\n    {\n      medicationName: \"Antibiotic\",\n      dose: \"5mg\",\n      frequency: \"2 pills per day\",\n    },\n  ],\n};\nconst treatment = new Treatment(req.body);\nawait treatment.validate();",
              "err": {},
              "uuid": "78bd9480-d97e-42e4-b32b-6523814eec91",
              "parentUUID": "1c7e7a14-5d0c-4ae9-9967-059d707644d1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#T6: should have Vaccination",
              "fullTitle": "Unit Test of Treatment Records #T6: should have Vaccination",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "req.body = {\n  petName: \"Habaobao\",\n  vetName: \"Doctor Dolittle\",\n  nurseName: \"Nancy\",\n  vaccination: [\n    { vaccineName: \"Triple Vaccine\", vaccinationDate: \"2025-09-27\" },\n  ],\n};\nconst treatment = new Treatment(req.body);\nawait treatment.validate();",
              "err": {},
              "uuid": "ad838e9b-ebe4-4e01-85bc-fedc0308a428",
              "parentUUID": "1c7e7a14-5d0c-4ae9-9967-059d707644d1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#T7: if have followUp and followUpDate",
              "fullTitle": "Unit Test of Treatment Records #T7: if have followUp and followUpDate",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "req.body = {\n  petName: \"Habaobao\",\n  vetName: \"Doctor Dolittle\",\n  nurseName: \"Nancy\",\n  followUp: true,\n  followUpDate: \"2025-10-20\",\n};\nconst treatment = new Treatment(req.body);\nawait treatment.validate();",
              "err": {},
              "uuid": "e17f7666-ecc9-4f7a-8154-22f899afdca1",
              "parentUUID": "1c7e7a14-5d0c-4ae9-9967-059d707644d1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#T8: should include Payment and check isPaid",
              "fullTitle": "Unit Test of Treatment Records #T8: should include Payment and check isPaid",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "req.body = {\n  petName: \"Habaobao\",\n  vetName: \"Doctor Dolittle\",\n  nurseName: \"Nancy\",\n  payment: \"111\",\n  isPaid: true,\n};\nconst treatment = new Treatment(req.body);\nawait treatment.validate();",
              "err": {},
              "uuid": "6b5824cf-0a20-48c1-90c8-7ed05c5abac1",
              "parentUUID": "1c7e7a14-5d0c-4ae9-9967-059d707644d1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#T9: should add a new treatment",
              "fullTitle": "Unit Test of Treatment Records #T9: should add a new treatment",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "req.body = { petName: \"Habaobao\", vetName: \"Doctor Dolittle\" };\nconst fakeTreatment = { ...req.body, _id: \"001\" };\nsandbox.stub(Treatment.prototype, \"save\").resolves(fakeTreatment);\nawait addTreatment(req, res);\nexpect(res.status.calledWith(201)).to.be.true;\nexpect(res.json.calledWith(fakeTreatment)).to.be.true;",
              "err": {},
              "uuid": "f8566390-7093-4719-a06b-2b4155dc3b5a",
              "parentUUID": "1c7e7a14-5d0c-4ae9-9967-059d707644d1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#T10: should return all treatments",
              "fullTitle": "Unit Test of Treatment Records #T10: should return all treatments",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fakeList = [{ _id: \"001\", petName: \"Habaobao\" }];\nsandbox.stub(Treatment, \"find\").resolves(fakeList);\nawait getTreatments(req, res);\nexpect(res.status.calledWith(200)).to.be.true;\nexpect(res.json.calledWith(fakeList)).to.be.true;",
              "err": {},
              "uuid": "dfe57d36-4f23-4fad-89ee-0bde1d996a41",
              "parentUUID": "1c7e7a14-5d0c-4ae9-9967-059d707644d1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#T11: should update a treatment",
              "fullTitle": "Unit Test of Treatment Records #T11: should update a treatment",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "req.params.id = \"001\";\nreq.body = { vetName: \"Doctor Dolittle\" };\nconst fakeUpdated = {\n  _id: \"001\",\n  petName: \"Habaobao\",\n  vetName: \"Doctor Dolittle\",\n};\nsandbox.stub(Treatment, \"findByIdAndUpdate\").resolves(fakeUpdated);\nawait updateTreatment(req, res);\nexpect(res.status.calledWith(200)).to.be.true;\nexpect(res.json.calledWith(fakeUpdated)).to.be.true;",
              "err": {},
              "uuid": "b1c58b56-ce32-4dde-9ab0-7feba402caba",
              "parentUUID": "1c7e7a14-5d0c-4ae9-9967-059d707644d1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#T12: should delete a treatment",
              "fullTitle": "Unit Test of Treatment Records #T12: should delete a treatment",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "req.params.id = \"001\";\nsandbox.stub(Treatment, \"findByIdAndDelete\").resolves({ _id: \"001\" });\nawait deleteTreatment(req, res);\nexpect(res.status.calledWith(200)).to.be.true;\nexpect(res.json.calledWithMatch({ message: \"Treatment deleted\" })).to.be\n  .true;",
              "err": {},
              "uuid": "71ae0ab2-d752-4feb-8dc2-438d6be12c82",
              "parentUUID": "1c7e7a14-5d0c-4ae9-9967-059d707644d1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#T13: should remove a Diagnosis Record",
              "fullTitle": "Unit Test of Treatment Records #T13: should remove a Diagnosis Record",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const treatment = new Treatment({\n  petName: \"Habaobao\",\n  vetName: \"Doctor Dolittle\",\n  nurseName: \"Nancy\",\n  diagnosisRecords: [\n    { weight: \"1.9\", temperature: \"38.5\", symptoms: \"cough\" },\n  ],\n});\nsandbox.stub(Treatment.prototype, \"save\").resolves(treatment);\nawait treatment.save();\ntreatment.diagnosisRecords.id(treatment.diagnosisRecords[0]._id).remove();\nawait treatment.save();\nexpect(treatment.diagnosisRecords).to.have.lengthOf(0);",
              "err": {},
              "uuid": "e58ec12c-64dc-48e0-9b72-411a91256c9c",
              "parentUUID": "1c7e7a14-5d0c-4ae9-9967-059d707644d1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#T14: should remove a Medication",
              "fullTitle": "Unit Test of Treatment Records #T14: should remove a Medication",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const treatment = new Treatment({\n  petName: \"Habaobao\",\n  vetName: \"Doctor Dolittle\",\n  nurseName: \"Nancy\",\n  medication: [\n    {\n      medicationName: \"Antibiotic\",\n      dose: \"5mg\",\n      frequency: \"2 pills per day\",\n    },\n  ],\n});\nsandbox.stub(Treatment.prototype, \"save\").resolves(treatment);\nawait treatment.save();\ntreatment.medication.id(treatment.medication[0]._id).remove();\nawait treatment.save();\nexpect(treatment.medication).to.have.lengthOf(0);",
              "err": {},
              "uuid": "9a3e7700-ed6e-496c-afd8-669cbf7d9a48",
              "parentUUID": "1c7e7a14-5d0c-4ae9-9967-059d707644d1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#T15: should remove a Vaccination",
              "fullTitle": "Unit Test of Treatment Records #T15: should remove a Vaccination",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const treatment = new Treatment({\n  petName: \"Habaobao\",\n  vetName: \"Doctor Dolittle\",\n  nurseName: \"Nancy\",\n  vaccination: [\n    { vaccineName: \"Triple Vaccine\", vaccinationDate: \"2025-09-27\" },\n  ],\n});\nsandbox.stub(Treatment.prototype, \"save\").resolves(treatment);\nawait treatment.save();\ntreatment.vaccination.id(treatment.vaccination[0]._id).remove();\nawait treatment.save();\nexpect(treatment.vaccination).to.have.lengthOf(0);",
              "err": {},
              "uuid": "3738fb0b-dd3b-4e8a-983a-306c8d77c3c4",
              "parentUUID": "1c7e7a14-5d0c-4ae9-9967-059d707644d1",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f29f0c32-5243-42ca-8711-8b632e30b576",
            "2a305c70-cc30-42ae-94fc-ef967f274720",
            "abf76ee9-298d-4b9b-8110-366e742ccd6f",
            "91c7ff23-1749-42cb-9507-ce21f4dbf535",
            "78bd9480-d97e-42e4-b32b-6523814eec91",
            "ad838e9b-ebe4-4e01-85bc-fedc0308a428",
            "e17f7666-ecc9-4f7a-8154-22f899afdca1",
            "6b5824cf-0a20-48c1-90c8-7ed05c5abac1",
            "f8566390-7093-4719-a06b-2b4155dc3b5a",
            "dfe57d36-4f23-4fad-89ee-0bde1d996a41",
            "b1c58b56-ce32-4dde-9ab0-7feba402caba",
            "71ae0ab2-d752-4feb-8dc2-438d6be12c82",
            "e58ec12c-64dc-48e0-9b72-411a91256c9c",
            "9a3e7700-ed6e-496c-afd8-669cbf7d9a48",
            "3738fb0b-dd3b-4e8a-983a-306c8d77c3c4"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 14,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.3.1"
    },
    "marge": {
      "options": {
        "reportDir": "mochawesome-report",
        "reportFilename": "mochawesome"
      },
      "version": "5.2.0"
    }
  }
}